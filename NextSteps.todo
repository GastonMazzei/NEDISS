. Compute synchronous state, i.e. fixed point: solve implicit equations, postpone making it distributed.
  You can do it with the minimization of scalar Loss = Field^2(x)
  Compute that operator's eigenvalues. How many static solutions does the kuramoto model have? are they all attractors? 

. Compute graph Laplacian, maybe generalize this code: https://github.com/bschwb/Graph-Laplacian/blob/main/header/graph_laplacian.hpp

. Allow 'h' to be taken from command line.
. Allow eqdif parameter/s and initial value/s to be taken from an input file

. In general try to open a bit the single_step_evolution and communicationFunctions so that we have general communicators and specific criteria.

. Compute distance to synchronous state, i.e. max_{ij}(\sqrt{(x_i-x_j)^2+y..+..z}) for Rossler, d=max_i|\delta_i| pulse-coupled, 
  En kuramoto el exponential decay es d(t) \propto exp(-t/\Tau) y d(t) es max_{ij} dist(\theta_i(t),\theta_j(t)) asique hay que fittear. Con 'dist' la 
  distancia circular.

