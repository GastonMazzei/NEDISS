        -:    0:Source:/usr/include/boost/system/detail/generic_category_message.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Utils/print_warnings.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Utils/print_warnings.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_SYSTEM_DETAIL_GENERIC_CATEGORY_MESSAGE_HPP_INCLUDED
        -:    2:#define BOOST_SYSTEM_DETAIL_GENERIC_CATEGORY_MESSAGE_HPP_INCLUDED
        -:    3:
        -:    4:// Implementation of generic_error_category_message
        -:    5://
        -:    6:// Copyright 2018 Peter Dimov
        -:    7://
        -:    8:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10://
        -:   11:// See library home page at http://www.boost.org/libs/system
        -:   12:
        -:   13:#include <boost/config.hpp>
        -:   14:#include <string>
        -:   15:#include <cstring>
        -:   16:
        -:   17:namespace boost
        -:   18:{
        -:   19:
        -:   20:namespace system
        -:   21:{
        -:   22:
        -:   23:namespace detail
        -:   24:{
        -:   25:
        -:   26:#if defined(__GLIBC__)
        -:   27:
        -:   28:// glibc has two incompatible strerror_r definitions
        -:   29:
function _ZN5boost6system6detail17strerror_r_helperEPKcS3_ called 0 returned 0% blocks executed 0%
    #####:   30:inline char const * strerror_r_helper( char const * r, char const * ) BOOST_NOEXCEPT
    $$$$$:   30-block  0
        -:   31:{
    #####:   32:    return r;
    $$$$$:   32-block  0
        -:   33:}
        -:   34:
        -:   35:inline char const * strerror_r_helper( int r, char const * buffer ) BOOST_NOEXCEPT
        -:   36:{
        -:   37:    return r == 0? buffer: "Unknown error";
        -:   38:}
        -:   39:
function _ZN5boost6system6detail30generic_error_category_messageEiPcm called 0 returned 0% blocks executed 0%
    #####:   40:inline char const * generic_error_category_message( int ev, char * buffer, std::size_t len ) BOOST_NOEXCEPT
    $$$$$:   40-block  0
        -:   41:{
    #####:   42:    return strerror_r_helper( strerror_r( ev, buffer, len ), buffer );
    $$$$$:   42-block  0
call    0 never executed
call    1 never executed
        -:   43:}
        -:   44:
function _ZN5boost6system6detail30generic_error_category_messageB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####:   45:inline std::string generic_error_category_message( int ev )
    $$$$$:   45-block  0
        -:   46:{
        -:   47:    char buffer[ 128 ];
    #####:   48:    return generic_error_category_message( ev, buffer, sizeof( buffer ) );
    $$$$$:   48-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:   48-block  1
call    5 never executed
    $$$$$:   48-block  2
    %%%%%:   48-block  3
call    6 never executed
    %%%%%:   48-block  4
        -:   49:}
        -:   50:
        -:   51:#else // #if defined(__GLIBC__)
        -:   52:
        -:   53:// std::strerror is thread-safe on everything else, incl. Windows
        -:   54:
        -:   55:# if defined( BOOST_MSVC )
        -:   56:#  pragma warning( push )
        -:   57:#  pragma warning( disable: 4996 )
        -:   58:# elif defined(__clang__) && defined(__has_warning)
        -:   59:#  pragma clang diagnostic push
        -:   60:#  if __has_warning("-Wdeprecated-declarations")
        -:   61:#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
        -:   62:#  endif
        -:   63:# endif
        -:   64:
        -:   65:inline std::string generic_error_category_message( int ev )
        -:   66:{
        -:   67:    char const * m = std::strerror( ev );
        -:   68:    return m? m: "Unknown error";
        -:   69:}
        -:   70:
        -:   71:inline char const * generic_error_category_message( int ev, char * buffer, std::size_t len ) BOOST_NOEXCEPT
        -:   72:{
        -:   73:    if( len == 0 )
        -:   74:    {
        -:   75:        return buffer;
        -:   76:    }
        -:   77:
        -:   78:    if( len == 1 )
        -:   79:    {
        -:   80:        buffer[0] = 0;
        -:   81:        return buffer;
        -:   82:    }
        -:   83:
        -:   84:    char const * m = std::strerror( ev );
        -:   85:
        -:   86:    if( m == 0 ) return "Unknown error";
        -:   87:
        -:   88:    std::strncpy( buffer, m, len - 1 );
        -:   89:    buffer[ len-1 ] = 0;
        -:   90:
        -:   91:    return buffer;
        -:   92:}
        -:   93:
        -:   94:# if defined( BOOST_MSVC )
        -:   95:#  pragma warning( pop )
        -:   96:# elif defined(__clang__) && defined(__has_warning)
        -:   97:#  pragma clang diagnostic pop
        -:   98:# endif
        -:   99:
        -:  100:#endif // #if defined(__GLIBC__)
        -:  101:
        -:  102:} // namespace detail
        -:  103:
        -:  104:} // namespace system
        -:  105:
        -:  106:} // namespace boost
        -:  107:
        -:  108:#endif // #ifndef BOOST_SYSTEM_DETAIL_GENERIC_CATEGORY_MESSAGE_HPP_INCLUDED
