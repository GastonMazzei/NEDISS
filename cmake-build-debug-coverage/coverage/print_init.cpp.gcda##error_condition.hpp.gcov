        -:    0:Source:/usr/include/boost/system/detail/error_condition.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Utils/print_init.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Utils/print_init.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_SYSTEM_DETAIL_ERROR_CONDITION_HPP_INCLUDED
        -:    2:#define BOOST_SYSTEM_DETAIL_ERROR_CONDITION_HPP_INCLUDED
        -:    3:
        -:    4://  Copyright Beman Dawes 2006, 2007
        -:    5://  Copyright Christoper Kohlhoff 2007
        -:    6://  Copyright Peter Dimov 2017, 2018
        -:    7://
        -:    8://  Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9://  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10://
        -:   11://  See library home page at http://www.boost.org/libs/system
        -:   12:
        -:   13:#include <boost/system/detail/error_category.hpp>
        -:   14:#include <boost/system/detail/generic_category.hpp>
        -:   15:#include <boost/system/detail/enable_if.hpp>
        -:   16:#include <boost/system/detail/is_same.hpp>
        -:   17:#include <boost/system/detail/errc.hpp>
        -:   18:#include <boost/system/is_error_condition_enum.hpp>
        -:   19:#include <boost/system/detail/config.hpp>
        -:   20:#include <boost/config.hpp>
        -:   21:
        -:   22:namespace boost
        -:   23:{
        -:   24:
        -:   25:namespace system
        -:   26:{
        -:   27:
        -:   28:// class error_condition
        -:   29:
        -:   30:// error_conditions are portable, error_codes are system or library specific
        -:   31:
        -:   32:namespace detail
        -:   33:{
        -:   34:
        -:   35:struct generic_value_tag
        -:   36:{
        -:   37:    int value;
function _ZN5boost6system6detail17generic_value_tagC2Ei called 0 returned 0% blocks executed 0%
    #####:   38:    BOOST_SYSTEM_CONSTEXPR explicit generic_value_tag( int v ): value( v ) {}
    $$$$$:   38-block  0
        -:   39:};
        -:   40:
        -:   41:} // namespace detail
        -:   42:
        -:   43:class error_condition
        -:   44:{
        -:   45:private:
        -:   46:
        -:   47:    int val_;
        -:   48:    bool failed_;
        -:   49:    error_category const * cat_;
        -:   50:
        -:   51:public:
        -:   52:
        -:   53:    // constructors:
        -:   54:
        -:   55:    BOOST_SYSTEM_CONSTEXPR error_condition() BOOST_NOEXCEPT:
        -:   56:        val_( 0 ), failed_( false ), cat_( 0 )
        -:   57:    {
        -:   58:    }
        -:   59:
function _ZN5boost6system15error_conditionC2EiRKNS0_14error_categoryE called 0 returned 0% blocks executed 0%
    #####:   60:    BOOST_SYSTEM_CONSTEXPR error_condition( int val, const error_category & cat ) BOOST_NOEXCEPT:
    $$$$$:   60-block  0
    #####:   61:        val_( val ), failed_( detail::failed_impl( val, cat ) ), cat_( &cat )
    $$$$$:   61-block  0
call    0 never executed
        -:   62:    {
    #####:   63:    }
        -:   64:
function _ZN5boost6system15error_conditionC2ENS0_6detail17generic_value_tagE called 0 returned 0% blocks executed 0%
    #####:   65:    BOOST_SYSTEM_CONSTEXPR explicit error_condition( boost::system::detail::generic_value_tag vt ) BOOST_NOEXCEPT:
    $$$$$:   65-block  0
    #####:   66:        val_( vt.value ), failed_( vt.value != 0 ), cat_( 0 )
        -:   67:    {
    #####:   68:    }
        -:   69:
        -:   70:    template<class ErrorConditionEnum> BOOST_SYSTEM_CONSTEXPR error_condition( ErrorConditionEnum e,
        -:   71:      typename detail::enable_if<
        -:   72:        is_error_condition_enum<ErrorConditionEnum>::value && !boost::system::detail::is_same<ErrorConditionEnum, errc::errc_t>::value
        -:   73:      >::type* = 0) BOOST_NOEXCEPT
        -:   74:    {
        -:   75:        *this = make_error_condition( e );
        -:   76:    }
        -:   77:
        -:   78:    template<class ErrorConditionEnum> BOOST_SYSTEM_CONSTEXPR error_condition( ErrorConditionEnum e,
        -:   79:      typename detail::enable_if<boost::system::detail::is_same<ErrorConditionEnum, errc::errc_t>::value>::type* = 0) BOOST_NOEXCEPT:
        -:   80:        val_( e ), failed_( e != 0 ), cat_( 0 )
        -:   81:    {
        -:   82:    }
        -:   83:
        -:   84:    // modifiers:
        -:   85:
        -:   86:    BOOST_SYSTEM_CONSTEXPR void assign( int val, const error_category & cat ) BOOST_NOEXCEPT
        -:   87:    {
        -:   88:        val_ = val;
        -:   89:        failed_ = detail::failed_impl( val, cat );
        -:   90:        cat_ = &cat;
        -:   91:    }
        -:   92:
        -:   93:    template<typename ErrorConditionEnum>
        -:   94:        BOOST_SYSTEM_CONSTEXPR typename detail::enable_if<is_error_condition_enum<ErrorConditionEnum>::value, error_condition>::type &
        -:   95:        operator=( ErrorConditionEnum val ) BOOST_NOEXCEPT
        -:   96:    {
        -:   97:        *this = error_condition( val );
        -:   98:        return *this;
        -:   99:    }
        -:  100:
        -:  101:    BOOST_SYSTEM_CONSTEXPR void clear() BOOST_NOEXCEPT
        -:  102:    {
        -:  103:        val_ = 0;
        -:  104:        failed_ = false;
        -:  105:        cat_ = 0;
        -:  106:    }
        -:  107:
        -:  108:    // observers:
        -:  109:
function _ZNK5boost6system15error_condition5valueEv called 0 returned 0% blocks executed 0%
    #####:  110:    BOOST_SYSTEM_CONSTEXPR int value() const BOOST_NOEXCEPT
    $$$$$:  110-block  0
        -:  111:    {
    #####:  112:        return val_;
    $$$$$:  112-block  0
        -:  113:    }
        -:  114:
function _ZNK5boost6system15error_condition8categoryEv called 0 returned 0% blocks executed 0%
    #####:  115:    BOOST_SYSTEM_CONSTEXPR const error_category & category() const BOOST_NOEXCEPT
    $$$$$:  115-block  0
        -:  116:    {
    #####:  117:        return cat_? *cat_: generic_category();
    $$$$$:  117-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  117-block  1
    $$$$$:  117-block  2
call    2 never executed
    $$$$$:  117-block  3
        -:  118:    }
        -:  119:
        -:  120:    std::string message() const
        -:  121:    {
        -:  122:        if( cat_ )
        -:  123:        {
        -:  124:            return cat_->message( value() );
        -:  125:        }
        -:  126:        else
        -:  127:        {
        -:  128:            return generic_category().message( value() );
        -:  129:        }
        -:  130:    }
        -:  131:
        -:  132:    char const * message( char * buffer, std::size_t len ) const BOOST_NOEXCEPT
        -:  133:    {
        -:  134:        if( cat_ )
        -:  135:        {
        -:  136:            return cat_->message( value(), buffer, len );
        -:  137:        }
        -:  138:        else
        -:  139:        {
        -:  140:            return generic_category().message( value(), buffer, len );
        -:  141:        }
        -:  142:    }
        -:  143:
        -:  144:    BOOST_SYSTEM_CONSTEXPR bool failed() const BOOST_NOEXCEPT
        -:  145:    {
        -:  146:        return failed_;
        -:  147:    }
        -:  148:
        -:  149:#if !defined(BOOST_NO_CXX11_EXPLICIT_CONVERSION_OPERATORS)
        -:  150:
        -:  151:    BOOST_SYSTEM_CONSTEXPR explicit operator bool() const BOOST_NOEXCEPT  // true if error
        -:  152:    {
        -:  153:        return failed_;
        -:  154:    }
        -:  155:
        -:  156:#else
        -:  157:
        -:  158:    typedef void (*unspecified_bool_type)();
        -:  159:    static void unspecified_bool_true() {}
        -:  160:
        -:  161:    BOOST_SYSTEM_CONSTEXPR operator unspecified_bool_type() const BOOST_NOEXCEPT  // true if error
        -:  162:    {
        -:  163:        return failed_? unspecified_bool_true: 0;
        -:  164:    }
        -:  165:
        -:  166:    BOOST_SYSTEM_CONSTEXPR bool operator!() const BOOST_NOEXCEPT  // true if no error
        -:  167:    {
        -:  168:        return !failed_;
        -:  169:    }
        -:  170:
        -:  171:#endif
        -:  172:
        -:  173:    // relationals:
        -:  174:    //  the more symmetrical non-member syntax allows enum
        -:  175:    //  conversions work for both rhs and lhs.
        -:  176:
function _ZN5boost6systemeqERKNS0_15error_conditionES3_ called 0 returned 0% blocks executed 0%
    #####:  177:    BOOST_SYSTEM_CONSTEXPR inline friend bool operator==( const error_condition & lhs, const error_condition & rhs ) BOOST_NOEXCEPT
    $$$$$:  177-block  0
        -:  178:    {
    #####:  179:        return lhs.val_ == rhs.val_ && lhs.category() == rhs.category();
    $$$$$:  179-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  179-block  1
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  179-block  2
    $$$$$:  179-block  3
    $$$$$:  179-block  4
        -:  180:    }
        -:  181:
        -:  182:    BOOST_SYSTEM_CONSTEXPR inline friend bool operator<( const error_condition & lhs, const error_condition & rhs ) BOOST_NOEXCEPT
        -:  183:    {
        -:  184:        error_category const& lcat = lhs.category();
        -:  185:        error_category const& rcat = rhs.category();
        -:  186:        return lcat < rcat || ( lcat == rcat && lhs.val_ < rhs.val_ );
        -:  187:    }
        -:  188:
        -:  189:    BOOST_SYSTEM_CONSTEXPR inline friend bool operator!=( const error_condition & lhs, const error_condition & rhs ) BOOST_NOEXCEPT
        -:  190:    {
        -:  191:        return !( lhs == rhs );
        -:  192:    }
        -:  193:
        -:  194:#if defined(BOOST_SYSTEM_HAS_SYSTEM_ERROR)
        -:  195:
function _ZNK5boost6system15error_conditioncvSt15error_conditionEv called 0 returned 0% blocks executed 0%
    #####:  196:    operator std::error_condition () const
    $$$$$:  196-block  0
        -:  197:    {
    #####:  198:        return std::error_condition( value(), category() );
    $$$$$:  198-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -:  199:    }
        -:  200:
        -:  201:    inline friend bool operator==( std::error_code const & lhs, error_condition const & rhs ) BOOST_NOEXCEPT
        -:  202:    {
        -:  203:        return lhs == static_cast< std::error_condition >( rhs );
        -:  204:    }
        -:  205:
        -:  206:    inline friend bool operator==( error_condition const & lhs, std::error_code const & rhs ) BOOST_NOEXCEPT
        -:  207:    {
        -:  208:        return static_cast< std::error_condition >( lhs ) == rhs;
        -:  209:    }
        -:  210:
        -:  211:    inline friend bool operator!=( std::error_code const & lhs, error_condition const & rhs ) BOOST_NOEXCEPT
        -:  212:    {
        -:  213:        return !( lhs == rhs );
        -:  214:    }
        -:  215:
        -:  216:    inline friend bool operator!=( error_condition const & lhs, std::error_code const & rhs ) BOOST_NOEXCEPT
        -:  217:    {
        -:  218:        return !( lhs == rhs );
        -:  219:    }
        -:  220:
        -:  221:#endif
        -:  222:
        -:  223:    template<class Ch, class Tr>
        -:  224:        inline friend std::basic_ostream<Ch, Tr>&
        -:  225:        operator<< (std::basic_ostream<Ch, Tr>& os, error_condition const & en)
        -:  226:    {
        -:  227:        {
        -:  228:            os << "cond:" << en.category().name() << ':' << en.value();
        -:  229:        }
        -:  230:
        -:  231:        return os;
        -:  232:    }
        -:  233:};
        -:  234:
        -:  235:} // namespace system
        -:  236:
        -:  237:} // namespace boost
        -:  238:
        -:  239:#endif // #ifndef BOOST_SYSTEM_DETAIL_ERROR_CONDITION_HPP_INCLUDED
