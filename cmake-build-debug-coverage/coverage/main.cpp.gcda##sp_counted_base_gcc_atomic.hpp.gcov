        -:    0:Source:/usr/include/boost/smart_ptr/detail/sp_counted_base_gcc_atomic.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/main.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_GCC_ATOMIC_HPP_INCLUDED
        -:    2:#define BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_GCC_ATOMIC_HPP_INCLUDED
        -:    3:
        -:    4:// MS compatible compilers support #pragma once
        -:    5:
        -:    6:#if defined(_MSC_VER) && (_MSC_VER >= 1020)
        -:    7:# pragma once
        -:    8:#endif
        -:    9:
        -:   10:// detail/sp_counted_base_gcc_atomic.hpp - g++ 4.7+ __atomic intrinsics
        -:   11://
        -:   12:// Copyright 2007, 2020 Peter Dimov
        -:   13:// Distributed under the Boost Software License, Version 1.0.
        -:   14:// https://www.boost.org/LICENSE_1_0.txt
        -:   15:
        -:   16:#include <boost/smart_ptr/detail/sp_typeinfo_.hpp>
        -:   17:#include <boost/config.hpp>
        -:   18:#include <boost/cstdint.hpp>
        -:   19:
        -:   20:#if defined(BOOST_SP_REPORT_IMPLEMENTATION)
        -:   21:
        -:   22:#include <boost/config/pragma_message.hpp>
        -:   23:BOOST_PRAGMA_MESSAGE("Using __atomic sp_counted_base")
        -:   24:
        -:   25:#endif
        -:   26:
        -:   27:namespace boost
        -:   28:{
        -:   29:
        -:   30:namespace detail
        -:   31:{
        -:   32:
function _ZN5boost6detail16atomic_incrementEPj called 381311 returned 100% blocks executed 100%
   381311:   33:inline void atomic_increment( boost::uint_least32_t * pw )
   381311:   33-block  0
        -:   34:{
   381311:   35:    __atomic_fetch_add( pw, 1, __ATOMIC_RELAXED );
   381311:   36:}
        -:   37:
function _ZN5boost6detail16atomic_decrementEPj called 21 returned 100% blocks executed 100%
       21:   38:inline boost::uint_least32_t atomic_decrement( boost::uint_least32_t * pw )
       21:   38-block  0
        -:   39:{
       21:   40:    return __atomic_fetch_sub( pw, 1, __ATOMIC_ACQ_REL );
       21:   40-block  0
        -:   41:}
        -:   42:
        -:   43:inline boost::uint_least32_t atomic_conditional_increment( boost::uint_least32_t * pw )
        -:   44:{
        -:   45:    // long r = *pw;
        -:   46:    // if( r != 0 ) ++*pw;
        -:   47:    // return r;
        -:   48:
        -:   49:    boost::uint_least32_t r = __atomic_load_n( pw, __ATOMIC_RELAXED );
        -:   50:
        -:   51:    for( ;; )
        -:   52:    {
        -:   53:        if( r == 0 )
        -:   54:        {
        -:   55:            return r;
        -:   56:        }
        -:   57:
        -:   58:        if( __atomic_compare_exchange_n( pw, &r, r + 1, true, __ATOMIC_RELAXED, __ATOMIC_RELAXED ) )
        -:   59:        {
        -:   60:            return r;
        -:   61:        }
        -:   62:    }
        -:   63:}
        -:   64:
        -:   65:inline boost::uint_least32_t atomic_load( boost::uint_least32_t const * pw )
        -:   66:{
        -:   67:    return __atomic_load_n( pw, __ATOMIC_ACQUIRE );
        -:   68:}
        -:   69:
        -:   70:class BOOST_SYMBOL_VISIBLE sp_counted_base
        -:   71:{
        -:   72:private:
        -:   73:
        -:   74:    sp_counted_base( sp_counted_base const & );
        -:   75:    sp_counted_base & operator= ( sp_counted_base const & );
        -:   76:
        -:   77:    boost::uint_least32_t use_count_;        // #shared
        -:   78:    boost::uint_least32_t weak_count_;       // #weak + (#shared != 0)
        -:   79:
        -:   80:public:
        -:   81:
function _ZN5boost6detail15sp_counted_baseC2Ev called 9 returned 100% blocks executed 100%
        9:   82:    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
        9:   82-block  0
        -:   83:    {
        9:   84:    }
        -:   85:
function _ZN5boost6detail15sp_counted_baseD0Ev called 0 returned 0% blocks executed 0%
function _ZN5boost6detail15sp_counted_baseD2Ev called 9 returned 100% blocks executed 100%
        9:   86:    virtual ~sp_counted_base() // nothrow
    $$$$$:   86-block  0
        9:   86-block  1
        9:   87:    {
    #####:   88:    }
    $$$$$:   88-block  0
call    0 never executed
call    1 never executed
        -:   89:
        -:   90:    // dispose() is called when use_count_ drops to zero, to release
        -:   91:    // the resources managed by *this.
        -:   92:
        -:   93:    virtual void dispose() = 0; // nothrow
        -:   94:
        -:   95:    // destroy() is called when weak_count_ drops to zero.
        -:   96:
function _ZN5boost6detail15sp_counted_base7destroyEv called 9 returned 100% blocks executed 100%
        9:   97:    virtual void destroy() // nothrow
        9:   97-block  0
        -:   98:    {
        9:   99:        delete this;
        9:   99-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 0
        9:   99-block  1
call    2 returned 9
        9:  100:    }
        -:  101:
        -:  102:    virtual void * get_deleter( sp_typeinfo_ const & ti ) = 0;
        -:  103:    virtual void * get_local_deleter( sp_typeinfo_ const & ti ) = 0;
        -:  104:    virtual void * get_untyped_deleter() = 0;
        -:  105:
function _ZN5boost6detail15sp_counted_base12add_ref_copyEv called 381311 returned 100% blocks executed 100%
   381311:  106:    void add_ref_copy()
   381311:  106-block  0
        -:  107:    {
   381311:  108:        atomic_increment( &use_count_ );
   381311:  108-block  0
call    0 returned 381311
   381311:  109:    }
        -:  110:
        -:  111:    bool add_ref_lock() // true on success
        -:  112:    {
        -:  113:        return atomic_conditional_increment( &use_count_ ) != 0;
        -:  114:    }
        -:  115:
function _ZN5boost6detail15sp_counted_base7releaseEv called 15 returned 100% blocks executed 100%
       15:  116:    void release() // nothrow
       15:  116-block  0
        -:  117:    {
       15:  118:        if( atomic_decrement( &use_count_ ) == 1 )
       15:  118-block  0
call    0 returned 15
branch  1 taken 6 (fallthrough)
branch  2 taken 9
        -:  119:        {
        6:  120:            dispose();
        6:  120-block  0
call    0 returned 6
        6:  121:            weak_release();
call    0 returned 6
        -:  122:        }
       15:  123:    }
        -:  124:
        -:  125:    void weak_add_ref() // nothrow
        -:  126:    {
        -:  127:        atomic_increment( &weak_count_ );
        -:  128:    }
        -:  129:
function _ZN5boost6detail15sp_counted_base12weak_releaseEv called 6 returned 100% blocks executed 100%
        6:  130:    void weak_release() // nothrow
        6:  130-block  0
        -:  131:    {
        6:  132:        if( atomic_decrement( &weak_count_ ) == 1 )
        6:  132-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        -:  133:        {
        6:  134:            destroy();
        6:  134-block  0
call    0 returned 6
        -:  135:        }
        6:  136:    }
        -:  137:
        -:  138:    long use_count() const // nothrow
        -:  139:    {
        -:  140:        return atomic_load( &use_count_ );
        -:  141:    }
        -:  142:};
        -:  143:
        -:  144:} // namespace detail
        -:  145:
        -:  146:} // namespace boost
        -:  147:
        -:  148:#endif  // #ifndef BOOST_SMART_PTR_DETAIL_SP_COUNTED_BASE_SYNC_HPP_INCLUDED
