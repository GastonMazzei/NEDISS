        -:    0:Source:/usr/include/boost/system/detail/error_category_impl.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/GraphClasses/GeneralGraph.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/GraphClasses/GeneralGraph.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_SYSTEM_DETAIL_ERROR_CATEGORY_IMPL_HPP_INCLUDED
        -:    2:#define BOOST_SYSTEM_DETAIL_ERROR_CATEGORY_IMPL_HPP_INCLUDED
        -:    3:
        -:    4://  Copyright Beman Dawes 2006, 2007
        -:    5://  Copyright Christoper Kohlhoff 2007
        -:    6://  Copyright Peter Dimov 2017, 2018
        -:    7://
        -:    8://  Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9://  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10://
        -:   11://  See library home page at http://www.boost.org/libs/system
        -:   12:
        -:   13:#include <boost/system/detail/error_category.hpp>
        -:   14:#include <boost/system/detail/error_condition.hpp>
        -:   15:#include <boost/system/detail/error_code.hpp>
        -:   16:#include <boost/system/detail/snprintf.hpp>
        -:   17:#include <boost/config.hpp>
        -:   18:#include <string>
        -:   19:#include <cstring>
        -:   20:
        -:   21:namespace boost
        -:   22:{
        -:   23:
        -:   24:namespace system
        -:   25:{
        -:   26:
        -:   27:// error_category default implementation
        -:   28:
function _ZNK5boost6system14error_category23default_error_conditionEi called 0 returned 0% blocks executed 0%
    #####:   29:inline error_condition error_category::default_error_condition( int ev ) const BOOST_NOEXCEPT
    $$$$$:   29-block  0
        -:   30:{
    #####:   31:    return error_condition( ev, *this );
    $$$$$:   31-block  0
call    0 never executed
        -:   32:}
        -:   33:
function _ZNK5boost6system14error_category10equivalentEiRKNS0_15error_conditionE called 0 returned 0% blocks executed 0%
    #####:   34:inline bool error_category::equivalent( int code, const error_condition & condition ) const BOOST_NOEXCEPT
    $$$$$:   34-block  0
        -:   35:{
    #####:   36:    return default_error_condition( code ) == condition;
    $$$$$:   36-block  0
call    0 never executed
call    1 never executed
        -:   37:}
        -:   38:
function _ZNK5boost6system14error_category10equivalentERKNS0_10error_codeEi called 0 returned 0% blocks executed 0%
    #####:   39:inline bool error_category::equivalent( const error_code & code, int condition ) const BOOST_NOEXCEPT
    $$$$$:   39-block  0
        -:   40:{
    #####:   41:    return *this == code.category() && code.value() == condition;
    $$$$$:   41-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:   41-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:   41-block  2
    $$$$$:   41-block  3
    $$$$$:   41-block  4
        -:   42:}
        -:   43:
function _ZNK5boost6system14error_category7messageEiPcm called 0 returned 0% blocks executed 0%
    #####:   44:inline char const * error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
    $$$$$:   44-block  0
        -:   45:{
    #####:   46:    if( len == 0 )
    $$$$$:   46-block  0
branch  0 never executed
branch  1 never executed
        -:   47:    {
    #####:   48:        return buffer;
    $$$$$:   48-block  0
        -:   49:    }
        -:   50:
    #####:   51:    if( len == 1 )
    $$$$$:   51-block  0
branch  0 never executed
branch  1 never executed
        -:   52:    {
    #####:   53:        buffer[0] = 0;
    #####:   54:        return buffer;
    $$$$$:   54-block  0
        -:   55:    }
        -:   56:
        -:   57:#if !defined(BOOST_NO_EXCEPTIONS)
        -:   58:    try
        -:   59:#endif
        -:   60:    {
    #####:   61:        std::string m = this->message( ev );
    $$$$$:   61-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
    $$$$$:   61-block  1
    %%%%%:   61-block  2
    %%%%%:   61-block  3
        -:   62:
        -:   63:# if defined( BOOST_MSVC )
        -:   64:#  pragma warning( push )
        -:   65:#  pragma warning( disable: 4996 )
        -:   66:# elif defined(__clang__) && defined(__has_warning)
        -:   67:#  pragma clang diagnostic push
        -:   68:#  if __has_warning("-Wdeprecated-declarations")
        -:   69:#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
        -:   70:#  endif
        -:   71:# endif
        -:   72:
    #####:   73:        std::strncpy( buffer, m.c_str(), len - 1 );
    $$$$$:   73-block  0
call    0 never executed
    #####:   74:        buffer[ len-1 ] = 0;
        -:   75:
        -:   76:# if defined( BOOST_MSVC )
        -:   77:#  pragma warning( pop )
        -:   78:# elif defined(__clang__) && defined(__has_warning)
        -:   79:#  pragma clang diagnostic pop
        -:   80:# endif
        -:   81:
    #####:   82:        return buffer;
        -:   83:    }
        -:   84:#if !defined(BOOST_NO_EXCEPTIONS)
    =====:   85:    catch( ... )
    %%%%%:   85-block  0
call    0 never executed
        -:   86:    {
    =====:   87:        detail::snprintf( buffer, len, "No message text available for error %d", ev );
call    0 never executed
    =====:   88:        return buffer;
        -:   89:    }
        -:   90:#endif
        -:   91:}
        -:   92:
        -:   93:} // namespace system
        -:   94:
        -:   95:} // namespace boost
        -:   96:
        -:   97:// interoperability with std::error_code, std::error_condition
        -:   98:
        -:   99:#if defined(BOOST_SYSTEM_HAS_SYSTEM_ERROR)
        -:  100:
        -:  101:#include <boost/system/detail/std_category.hpp>
        -:  102:
function _ZNK5boost6system14error_categorycvRKNSt3_V214error_categoryEEv called 0 returned 0% blocks executed 0%
    #####:  103:inline boost::system::error_category::operator std::error_category const & () const
    $$$$$:  103-block  0
        -:  104:{
    #####:  105:    if( id_ == boost::system::detail::system_category_id )
    $$$$$:  105-block  0
branch  0 never executed
branch  1 never executed
        -:  106:    {
    #####:  107:        static const boost::system::detail::std_category system_instance( this, 0x1F4D7 );
    $$$$$:  107-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  107-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  107-block  2
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  108:        return system_instance;
    $$$$$:  108-block  0
        -:  109:    }
        -:  110:
    #####:  111:    if( id_ == boost::system::detail::generic_category_id )
    $$$$$:  111-block  0
branch  0 never executed
branch  1 never executed
        -:  112:    {
    #####:  113:        static const boost::system::detail::std_category generic_instance( this, 0x1F4D3 );
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  113-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  113-block  2
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  114:        return generic_instance;
    $$$$$:  114-block  0
        -:  115:    }
        -:  116:
    #####:  117:    boost::system::detail::std_category* p = ps_.load( std::memory_order_acquire );
    $$$$$:  117-block  0
call    0 never executed
        -:  118:
    #####:  119:    if( p != 0 )
branch  0 never executed
branch  1 never executed
        -:  120:    {
    #####:  121:        return *p;
    $$$$$:  121-block  0
        -:  122:    }
        -:  123:
    #####:  124:    boost::system::detail::std_category* q = new detail::std_category( this, 0 );
    $$$$$:  124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  124-block  1
call    3 never executed
        -:  125:
    #####:  126:    if( ps_.compare_exchange_strong( p, q, std::memory_order_release, std::memory_order_acquire ) )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  127:    {
    #####:  128:        return *q;
    $$$$$:  128-block  0
        -:  129:    }
        -:  130:    else
        -:  131:    {
    #####:  132:        delete q;
    $$$$$:  132-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  132-block  1
call    2 never executed
    #####:  133:        return *p;
    $$$$$:  133-block  0
    $$$$$:  133-block  1
    $$$$$:  133-block  2
        -:  134:    }
        -:  135:}
        -:  136:
        -:  137:#endif // #if defined(BOOST_SYSTEM_HAS_SYSTEM_ERROR)
        -:  138:
        -:  139:#endif // #ifndef BOOST_SYSTEM_DETAIL_ERROR_CATEGORY_IMPL_HPP_INCLUDED
