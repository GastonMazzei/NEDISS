        -:    0:Source:/usr/include/boost/graph/parallel/distribution.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2004 The Trustees of Indiana University.
        -:    2:
        -:    3:// Use, modification and distribution is subject to the Boost Software
        -:    4:// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    5:// http://www.boost.org/LICENSE_1_0.txt)
        -:    6:
        -:    7://  Authors: Douglas Gregor
        -:    8://           Peter Gottschling
        -:    9://           Andrew Lumsdaine
        -:   10:#ifndef BOOST_PARALLEL_DISTRIBUTION_HPP
        -:   11:#define BOOST_PARALLEL_DISTRIBUTION_HPP
        -:   12:
        -:   13:#ifndef BOOST_GRAPH_USE_MPI
        -:   14:#error "Parallel BGL files should not be included unless <boost/graph/use_mpi.hpp> has been included"
        -:   15:#endif
        -:   16:
        -:   17:#include <cstddef>
        -:   18:#include <vector>
        -:   19:#include <algorithm>
        -:   20:#include <numeric>
        -:   21:#include <boost/assert.hpp>
        -:   22:#include <boost/iterator/counting_iterator.hpp>
        -:   23:#include <boost/random/uniform_int.hpp>
        -:   24:#include <boost/shared_ptr.hpp>
        -:   25:#include <boost/config.hpp>
        -:   26:#include <typeinfo>
        -:   27:
        -:   28:namespace boost { namespace parallel {
        -:   29:
        -:   30:template<typename ProcessGroup, typename SizeType = std::size_t>
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmEC2ERKS5_ called 0 returned 0% blocks executed 0%
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmED2Ev called 0 returned 0% blocks executed 0%
    #####:   31:class variant_distribution
    $$$$$:   31-block  0
    $$$$$:   31-block  1
call    0 never executed
    $$$$$:   31-block  2
    $$$$$:   31-block  3
call    1 never executed
        -:   32:{
        -:   33:public:
        -:   34:  typedef typename ProcessGroup::process_id_type process_id_type;
        -:   35:  typedef typename ProcessGroup::process_size_type process_size_type;
        -:   36:  typedef SizeType size_type;
        -:   37:
        -:   38:private:
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE18basic_distributionC2Ev called 0 returned 0% blocks executed 0%
    #####:   39:  struct basic_distribution
    $$$$$:   39-block  0
        -:   40:  {
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE18basic_distributionD0Ev called 0 returned 0% blocks executed 0%
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE18basic_distributionD2Ev called 0 returned 0% blocks executed 0%
    #####:   41:    virtual ~basic_distribution() {}
    $$$$$:   41-block  0
    $$$$$:   41-block  1
call    0 never executed
call    1 never executed
    $$$$$:   41-block  2
        -:   42:    virtual size_type block_size(process_id_type, size_type) const = 0;
        -:   43:    virtual process_id_type in_process(size_type) const = 0;
        -:   44:    virtual size_type local(size_type) const = 0;
        -:   45:    virtual size_type global(size_type) const = 0;
        -:   46:    virtual size_type global(process_id_type, size_type) const = 0;
        -:   47:    virtual void* address() = 0;
        -:   48:    virtual const void* address() const = 0;
        -:   49:    virtual const std::type_info& type() const = 0;
        -:   50:  };
        -:   51:
        -:   52:  template<typename Distribution>
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEED0Ev called 0 returned 0% blocks executed 0%
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEED2Ev called 0 returned 0% blocks executed 0%
    #####:   53:  struct poly_distribution : public basic_distribution
    $$$$$:   53-block  0
    $$$$$:   53-block  1
call    0 never executed
call    1 never executed
    $$$$$:   53-block  2
    $$$$$:   53-block  3
call    2 never executed
        -:   54:  {
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEEC2ERKS7_ called 0 returned 0% blocks executed 0%
    #####:   55:    explicit poly_distribution(const Distribution& distribution)
    $$$$$:   55-block  0
    #####:   56:      : distribution_(distribution) { }
    $$$$$:   56-block  0
call    0 never executed
        -:   57:
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE10block_sizeEim called 0 returned 0% blocks executed 0%
    #####:   58:    virtual size_type block_size(process_id_type id, size_type n) const
    $$$$$:   58-block  0
    #####:   59:    { return distribution_.block_size(id, n); }
    $$$$$:   59-block  0
call    0 never executed
        -:   60:
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE10in_processEm called 0 returned 0% blocks executed 0%
    #####:   61:    virtual process_id_type in_process(size_type i) const
    $$$$$:   61-block  0
    #####:   62:    { return distribution_(i); }
    $$$$$:   62-block  0
call    0 never executed
        -:   63:
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE5localEm called 0 returned 0% blocks executed 0%
    #####:   64:    virtual size_type local(size_type i) const
    $$$$$:   64-block  0
    #####:   65:    { return distribution_.local(i); }
    $$$$$:   65-block  0
call    0 never executed
        -:   66:
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE6globalEm called 0 returned 0% blocks executed 0%
    #####:   67:    virtual size_type global(size_type n) const
    $$$$$:   67-block  0
    #####:   68:    { return distribution_.global(n); }
    $$$$$:   68-block  0
call    0 never executed
        -:   69:
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE6globalEim called 0 returned 0% blocks executed 0%
    #####:   70:    virtual size_type global(process_id_type id, size_type n) const
    $$$$$:   70-block  0
    #####:   71:    { return distribution_.global(id, n); }
    $$$$$:   71-block  0
call    0 never executed
        -:   72:
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE7addressEv called 0 returned 0% blocks executed 0%
    #####:   73:    virtual void* address() { return &distribution_; }
    $$$$$:   73-block  0
    $$$$$:   73-block  1
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE7addressEv called 0 returned 0% blocks executed 0%
    #####:   74:    virtual const void* address() const { return &distribution_; }
    $$$$$:   74-block  0
    $$$$$:   74-block  1
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE17poly_distributionINS0_5blockEE4typeEv called 0 returned 0% blocks executed 0%
    #####:   75:    virtual const std::type_info& type() const { return typeid(Distribution); }
    $$$$$:   75-block  0
    $$$$$:   75-block  1
        -:   76:
        -:   77:  private:
        -:   78:    Distribution distribution_;
        -:   79:  };
        -:   80:
        -:   81:public:
        -:   82:  variant_distribution() { }
        -:   83:
        -:   84:  template<typename Distribution>
function _ZN5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmEC2INS0_5blockEEERKT_ called 0 returned 0% blocks executed 0%
    #####:   85:  variant_distribution(const Distribution& distribution)
    $$$$$:   85-block  0
    #####:   86:    : distribution_(new poly_distribution<Distribution>(distribution)) { }
    $$$$$:   86-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:   87:
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE10block_sizeEim called 0 returned 0% blocks executed 0%
    #####:   88:  size_type block_size(process_id_type id, size_type n) const
    $$$$$:   88-block  0
    #####:   89:  { return distribution_->block_size(id, n); }
    $$$$$:   89-block  0
call    0 never executed
call    1 never executed
        -:   90:  
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmEclEm called 0 returned 0% blocks executed 0%
    #####:   91:  process_id_type operator()(size_type i) const
    $$$$$:   91-block  0
    #####:   92:  { return distribution_->in_process(i); }
    $$$$$:   92-block  0
call    0 never executed
call    1 never executed
        -:   93:  
function _ZNK5boost8parallel20variant_distributionINS_5graph11distributed17mpi_process_groupEmE5localEm called 0 returned 0% blocks executed 0%
    #####:   94:  size_type local(size_type i) const
    $$$$$:   94-block  0
    #####:   95:  { return distribution_->local(i); }
    $$$$$:   95-block  0
call    0 never executed
call    1 never executed
        -:   96:  
        -:   97:  size_type global(size_type n) const
        -:   98:  { return distribution_->global(n); }
        -:   99:
        -:  100:  size_type global(process_id_type id, size_type n) const
        -:  101:  { return distribution_->global(id, n); }
        -:  102:
        -:  103:  operator bool() const { return distribution_; }
        -:  104:
        -:  105:  void clear() { distribution_.reset(); }
        -:  106:
        -:  107:  template<typename T>
        -:  108:  T* as()
        -:  109:  {
        -:  110:    if (distribution_->type() == typeid(T))
        -:  111:      return static_cast<T*>(distribution_->address());
        -:  112:    else
        -:  113:      return 0;
        -:  114:  }
        -:  115:
        -:  116:  template<typename T>
        -:  117:  const T* as() const
        -:  118:  {
        -:  119:    if (distribution_->type() == typeid(T))
        -:  120:      return static_cast<T*>(distribution_->address());
        -:  121:    else
        -:  122:      return 0;
        -:  123:  }
        -:  124:
        -:  125:private:
        -:  126:  shared_ptr<basic_distribution> distribution_;
        -:  127:};
        -:  128:
        -:  129:struct block
        -:  130:{
        -:  131:  template<typename LinearProcessGroup>
function _ZN5boost8parallel5blockC2INS_5graph11distributed17mpi_process_groupEEERKT_m called 0 returned 0% blocks executed 0%
    #####:  132:  explicit block(const LinearProcessGroup& pg, std::size_t n) 
    $$$$$:  132-block  0
    #####:  133:    : id(process_id(pg)), p(num_processes(pg)), n(n) { }
    $$$$$:  133-block  0
call    0 never executed
call    1 never executed
        -:  134:
        -:  135:  // If there are n elements in the distributed data structure, returns the number of elements stored locally.
        -:  136:  template<typename SizeType>
        -:  137:  SizeType block_size(SizeType n) const
        -:  138:  { return (n / p) + ((std::size_t)(n % p) > id? 1 : 0); }
        -:  139:
        -:  140:  // If there are n elements in the distributed data structure, returns the number of elements stored on processor ID
        -:  141:  template<typename SizeType, typename ProcessID>
function _ZNK5boost8parallel5block10block_sizeImiEET_T0_S3_ called 0 returned 0% blocks executed 0%
    #####:  142:  SizeType block_size(ProcessID id, SizeType n) const
    $$$$$:  142-block  0
    #####:  143:  { return (n / p) + ((ProcessID)(n % p) > id? 1 : 0); }
    $$$$$:  143-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  143-block  1
    $$$$$:  143-block  2
    $$$$$:  143-block  3
        -:  144:
        -:  145:  // Returns the processor on which element with global index i is stored
        -:  146:  template<typename SizeType>
function _ZNK5boost8parallel5blockclImEET_S3_ called 0 returned 0% blocks executed 0%
    #####:  147:  SizeType operator()(SizeType i) const
    $$$$$:  147-block  0
        -:  148:  { 
    #####:  149:    SizeType cutoff_processor = n % p;
    #####:  150:    SizeType cutoff = cutoff_processor * (n / p + 1);
        -:  151:
    #####:  152:    if (i < cutoff) return i / (n / p + 1);
    $$$$$:  152-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  152-block  1
    #####:  153:    else return cutoff_processor + (i - cutoff) / (n / p);
    $$$$$:  153-block  0
        -:  154:  }
        -:  155:
        -:  156:  // Find the starting index for processor with the given id
        -:  157:  template<typename ID>
function _ZNK5boost8parallel5block5startIiEEmT_ called 0 returned 0% blocks executed 0%
function _ZNK5boost8parallel5block5startImEEmT_ called 0 returned 0% blocks executed 0%
    #####:  158:  std::size_t start(ID id) const
    $$$$$:  158-block  0
    $$$$$:  158-block  1
        -:  159:  {
    #####:  160:    std::size_t estimate = id * (n / p + 1);
    #####:  161:    ID cutoff_processor = n % p;
    #####:  162:    if (id < cutoff_processor) return estimate;
    $$$$$:  162-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  162-block  1
    $$$$$:  162-block  2
branch  2 never executed
branch  3 never executed
    $$$$$:  162-block  3
    #####:  163:    else return estimate - (id - cutoff_processor);
    $$$$$:  163-block  0
    $$$$$:  163-block  1
        -:  164:  }
        -:  165:
        -:  166:  // Find the local index for the ith global element
        -:  167:  template<typename SizeType>
function _ZNK5boost8parallel5block5localImEET_S3_ called 0 returned 0% blocks executed 0%
    #####:  168:  SizeType local(SizeType i) const
    $$$$$:  168-block  0
        -:  169:  { 
    #####:  170:    SizeType owner = (*this)(i);
    $$$$$:  170-block  0
call    0 never executed
    #####:  171:    return i - start(owner);
call    0 never executed
        -:  172:  }
        -:  173:
        -:  174:  // Returns the global index of local element i
        -:  175:  template<typename SizeType>
function _ZNK5boost8parallel5block6globalImEET_S3_ called 0 returned 0% blocks executed 0%
    #####:  176:  SizeType global(SizeType i) const
    $$$$$:  176-block  0
    #####:  177:  { return global(id, i); }
    $$$$$:  177-block  0
call    0 never executed
        -:  178:
        -:  179:  // Returns the global index of the ith local element on processor id
        -:  180:  template<typename ProcessID, typename SizeType>
function _ZNK5boost8parallel5block6globalImmEET0_T_S3_ called 0 returned 0% blocks executed 0%
function _ZNK5boost8parallel5block6globalIimEET0_T_S3_ called 0 returned 0% blocks executed 0%
    #####:  181:  SizeType global(ProcessID id, SizeType i) const
    $$$$$:  181-block  0
    $$$$$:  181-block  1
    #####:  182:  { return i + start(id); }
    $$$$$:  182-block  0
call    0 never executed
    $$$$$:  182-block  1
call    1 never executed
        -:  183:
        -:  184: private:
        -:  185:  std::size_t id; //< The ID number of this processor
        -:  186:  std::size_t p;  //< The number of processors
        -:  187:  std::size_t n;  //< The size of the problem space
        -:  188:};
        -:  189:
        -:  190:// Block distribution with arbitrary block sizes
        -:  191:struct uneven_block
        -:  192:{
        -:  193:  typedef std::vector<std::size_t>    size_vector;
        -:  194:
        -:  195:  template<typename LinearProcessGroup>
        -:  196:  explicit uneven_block(const LinearProcessGroup& pg, const std::vector<std::size_t>& local_sizes) 
        -:  197:    : id(process_id(pg)), p(num_processes(pg)), local_sizes(local_sizes)
        -:  198:  { 
        -:  199:    BOOST_ASSERT(local_sizes.size() == p);
        -:  200:    local_starts.resize(p + 1);
        -:  201:    local_starts[0] = 0;
        -:  202:    std::partial_sum(local_sizes.begin(), local_sizes.end(), &local_starts[1]);
        -:  203:    n = local_starts[p];
        -:  204:  }
        -:  205:
        -:  206:  // To do maybe: enter local size in each process and gather in constructor (much handier)
        -:  207:  // template<typename LinearProcessGroup>
        -:  208:  // explicit uneven_block(const LinearProcessGroup& pg, std::size_t my_local_size) 
        -:  209:
        -:  210:  // If there are n elements in the distributed data structure, returns the number of elements stored locally.
        -:  211:  template<typename SizeType>
        -:  212:  SizeType block_size(SizeType) const
        -:  213:  { return local_sizes[id]; }
        -:  214:
        -:  215:  // If there are n elements in the distributed data structure, returns the number of elements stored on processor ID
        -:  216:  template<typename SizeType, typename ProcessID>
        -:  217:  SizeType block_size(ProcessID id, SizeType) const
        -:  218:  { return local_sizes[id]; }
        -:  219:
        -:  220:  // Returns the processor on which element with global index i is stored
        -:  221:  template<typename SizeType>
        -:  222:  SizeType operator()(SizeType i) const
        -:  223:  {
        -:  224:    BOOST_ASSERT (i >= (SizeType) 0 && i < (SizeType) n); // check for valid range
        -:  225:    size_vector::const_iterator lb = std::lower_bound(local_starts.begin(), local_starts.end(), (std::size_t) i);
        -:  226:    return ((SizeType)(*lb) == i ? lb : --lb) - local_starts.begin();
        -:  227:  }
        -:  228:
        -:  229:  // Find the starting index for processor with the given id
        -:  230:  template<typename ID>
        -:  231:  std::size_t start(ID id) const 
        -:  232:  {
        -:  233:    return local_starts[id];
        -:  234:  }
        -:  235:
        -:  236:  // Find the local index for the ith global element
        -:  237:  template<typename SizeType>
        -:  238:  SizeType local(SizeType i) const
        -:  239:  { 
        -:  240:    SizeType owner = (*this)(i);
        -:  241:    return i - start(owner);
        -:  242:  }
        -:  243:
        -:  244:  // Returns the global index of local element i
        -:  245:  template<typename SizeType>
        -:  246:  SizeType global(SizeType i) const
        -:  247:  { return global(id, i); }
        -:  248:
        -:  249:  // Returns the global index of the ith local element on processor id
        -:  250:  template<typename ProcessID, typename SizeType>
        -:  251:  SizeType global(ProcessID id, SizeType i) const
        -:  252:  { return i + start(id); }
        -:  253:
        -:  254: private:
        -:  255:  std::size_t              id;           //< The ID number of this processor
        -:  256:  std::size_t              p;            //< The number of processors
        -:  257:  std::size_t              n;            //< The size of the problem space
        -:  258:  std::vector<std::size_t> local_sizes;  //< The sizes of all blocks
        -:  259:  std::vector<std::size_t> local_starts; //< Lowest global index of each block
        -:  260:};
        -:  261:
        -:  262:
        -:  263:struct oned_block_cyclic
        -:  264:{
        -:  265:  template<typename LinearProcessGroup>
        -:  266:  explicit oned_block_cyclic(const LinearProcessGroup& pg, std::size_t size)
        -:  267:    : id(process_id(pg)), p(num_processes(pg)), size(size) { }
        -:  268:      
        -:  269:  template<typename SizeType>
        -:  270:  SizeType block_size(SizeType n) const
        -:  271:  { 
        -:  272:    return block_size(id, n);
        -:  273:  }
        -:  274:
        -:  275:  template<typename SizeType, typename ProcessID>
        -:  276:  SizeType block_size(ProcessID id, SizeType n) const
        -:  277:  {
        -:  278:    SizeType all_blocks = n / size;
        -:  279:    SizeType extra_elements = n % size;
        -:  280:    SizeType everyone_gets = all_blocks / p;
        -:  281:    SizeType extra_blocks = all_blocks % p;
        -:  282:    SizeType my_blocks = everyone_gets + (p < extra_blocks? 1 : 0);
        -:  283:    SizeType my_elements = my_blocks * size 
        -:  284:                         + (p == extra_blocks? extra_elements : 0);
        -:  285:    return my_elements;
        -:  286:  }
        -:  287:
        -:  288:  template<typename SizeType>
        -:  289:  SizeType operator()(SizeType i) const
        -:  290:  { 
        -:  291:    return (i / size) % p;
        -:  292:  }
        -:  293:
        -:  294:  template<typename SizeType>
        -:  295:  SizeType local(SizeType i) const
        -:  296:  { 
        -:  297:    return ((i / size) / p) * size + i % size;
        -:  298:  }
        -:  299:
        -:  300:  template<typename SizeType>
        -:  301:  SizeType global(SizeType i) const
        -:  302:  { return global(id, i); }
        -:  303:
        -:  304:  template<typename ProcessID, typename SizeType>
        -:  305:  SizeType global(ProcessID id, SizeType i) const
        -:  306:  { 
        -:  307:    return ((i / size) * p + id) * size + i % size;
        -:  308:  }
        -:  309:
        -:  310: private:
        -:  311:  std::size_t id;                   //< The ID number of this processor
        -:  312:  std::size_t p;                    //< The number of processors
        -:  313:  std::size_t size;                 //< Block size
        -:  314:};
        -:  315:
        -:  316:struct twod_block_cyclic
        -:  317:{
        -:  318:  template<typename LinearProcessGroup>
        -:  319:  explicit twod_block_cyclic(const LinearProcessGroup& pg,
        -:  320:                             std::size_t block_rows, std::size_t block_columns,
        -:  321:                             std::size_t data_columns_per_row)
        -:  322:    : id(process_id(pg)), p(num_processes(pg)), 
        -:  323:      block_rows(block_rows), block_columns(block_columns), 
        -:  324:      data_columns_per_row(data_columns_per_row)
        -:  325:  { }
        -:  326:      
        -:  327:  template<typename SizeType>
        -:  328:  SizeType block_size(SizeType n) const
        -:  329:  { 
        -:  330:    return block_size(id, n);
        -:  331:  }
        -:  332:
        -:  333:  template<typename SizeType, typename ProcessID>
        -:  334:  SizeType block_size(ProcessID id, SizeType n) const
        -:  335:  {
        -:  336:    // TBD: This is really lame :)
        -:  337:    int result = -1;
        -:  338:    while (n > 0) {
        -:  339:      --n;
        -:  340:      if ((*this)(n) == id && (int)local(n) > result) result = local(n);
        -:  341:    }
        -:  342:    ++result;
        -:  343:
        -:  344:    //    std::cerr << "Block size of id " << id << " is " << result << std::endl;
        -:  345:    return result;
        -:  346:  }
        -:  347:
        -:  348:  template<typename SizeType>
        -:  349:  SizeType operator()(SizeType i) const
        -:  350:  { 
        -:  351:    SizeType result = get_block_num(i) % p;
        -:  352:    //    std::cerr << "Item " << i << " goes on processor " << result << std::endl;
        -:  353:    return result;
        -:  354:  }
        -:  355:
        -:  356:  template<typename SizeType>
        -:  357:  SizeType local(SizeType i) const
        -:  358:  { 
        -:  359:    // Compute the start of the block
        -:  360:    std::size_t block_num = get_block_num(i);
        -:  361:    //    std::cerr << "Item " << i << " is in block #" << block_num << std::endl;
        -:  362:
        -:  363:    std::size_t local_block_num = block_num / p;
        -:  364:    std::size_t block_start = local_block_num * block_rows * block_columns;
        -:  365:
        -:  366:    // Compute the offset into the block 
        -:  367:    std::size_t data_row = i / data_columns_per_row;
        -:  368:    std::size_t data_col = i % data_columns_per_row;
        -:  369:    std::size_t block_offset = (data_row % block_rows) * block_columns 
        -:  370:                             + (data_col % block_columns);    
        -:  371:
        -:  372:    //    std::cerr << "Item " << i << " maps to local index " << block_start+block_offset << std::endl;
        -:  373:    return block_start + block_offset;
        -:  374:  }
        -:  375:
        -:  376:  template<typename SizeType>
        -:  377:  SizeType global(SizeType i) const
        -:  378:  { 
        -:  379:    // Compute the (global) block in which this element resides
        -:  380:    SizeType local_block_num = i / (block_rows * block_columns);
        -:  381:    SizeType block_offset = i % (block_rows * block_columns);
        -:  382:    SizeType block_num = local_block_num * p + id;
        -:  383:
        -:  384:    // Compute the position of the start of the block (globally)
        -:  385:    SizeType block_start = block_num * block_rows * block_columns;
        -:  386:
        -:  387:    std::cerr << "Block " << block_num << " starts at index " << block_start
        -:  388:              << std::endl;
        -:  389:
        -:  390:    // Compute the row and column of this block
        -:  391:    SizeType block_row = block_num / (data_columns_per_row / block_columns);
        -:  392:    SizeType block_col = block_num % (data_columns_per_row / block_columns);
        -:  393:
        -:  394:    SizeType row_in_block = block_offset / block_columns;
        -:  395:    SizeType col_in_block = block_offset % block_columns;
        -:  396:
        -:  397:    std::cerr << "Local index " << i << " is in block at row " << block_row
        -:  398:              << ", column " << block_col << ", in-block row " << row_in_block
        -:  399:              << ", in-block col " << col_in_block << std::endl;
        -:  400:
        -:  401:    SizeType result = block_row * block_rows + block_col * block_columns
        -:  402:                    + row_in_block * block_rows + col_in_block;
        -:  403:
        -:  404:
        -:  405:    std::cerr << "global(" << i << "@" << id << ") = " << result 
        -:  406:              << " =? " << local(result) << std::endl;
        -:  407:    BOOST_ASSERT(i == local(result));
        -:  408:    return result;
        -:  409:  }
        -:  410:
        -:  411: private:
        -:  412:  template<typename SizeType>
        -:  413:  std::size_t get_block_num(SizeType i) const
        -:  414:  {
        -:  415:    std::size_t data_row = i / data_columns_per_row;
        -:  416:    std::size_t data_col = i % data_columns_per_row;
        -:  417:    std::size_t block_row = data_row / block_rows;
        -:  418:    std::size_t block_col = data_col / block_columns;
        -:  419:    std::size_t blocks_in_row = data_columns_per_row / block_columns;
        -:  420:    std::size_t block_num = block_col * blocks_in_row + block_row;
        -:  421:    return block_num;
        -:  422:  }
        -:  423:
        -:  424:  std::size_t id;                   //< The ID number of this processor
        -:  425:  std::size_t p;                    //< The number of processors
        -:  426:  std::size_t block_rows;           //< The # of rows in each block
        -:  427:  std::size_t block_columns;        //< The # of columns in each block
        -:  428:  std::size_t data_columns_per_row; //< The # of columns per row of data
        -:  429:};
        -:  430:
        -:  431:class twod_random
        -:  432:{
        -:  433:  template<typename RandomNumberGen>
        -:  434:  struct random_int
        -:  435:  {
        -:  436:    explicit random_int(RandomNumberGen& gen) : gen(gen) { }
        -:  437:
        -:  438:    template<typename T>
        -:  439:    T operator()(T n) const
        -:  440:    {
        -:  441:      uniform_int<T> distrib(0, n-1);
        -:  442:      return distrib(gen);
        -:  443:    }
        -:  444:
        -:  445:  private:
        -:  446:    RandomNumberGen& gen;
        -:  447:  };
        -:  448:  
        -:  449: public:
        -:  450:  template<typename LinearProcessGroup, typename RandomNumberGen>
        -:  451:  explicit twod_random(const LinearProcessGroup& pg,
        -:  452:                       std::size_t block_rows, std::size_t block_columns,
        -:  453:                       std::size_t data_columns_per_row,
        -:  454:                       std::size_t n,
        -:  455:                       RandomNumberGen& gen)
        -:  456:    : id(process_id(pg)), p(num_processes(pg)), 
        -:  457:      block_rows(block_rows), block_columns(block_columns), 
        -:  458:      data_columns_per_row(data_columns_per_row),
        -:  459:      global_to_local(n / (block_rows * block_columns))
        -:  460:  { 
        -:  461:    std::copy(make_counting_iterator(std::size_t(0)),
        -:  462:              make_counting_iterator(global_to_local.size()),
        -:  463:              global_to_local.begin());
        -:  464:
        -:  465:#if defined(BOOST_NO_CXX98_RANDOM_SHUFFLE)
        -:  466:    std::shuffle(global_to_local.begin(), global_to_local.end(), gen);
        -:  467:#else
        -:  468:    random_int<RandomNumberGen> rand(gen);
        -:  469:    std::random_shuffle(global_to_local.begin(), global_to_local.end(), rand);
        -:  470:#endif
        -:  471:  }
        -:  472:      
        -:  473:  template<typename SizeType>
        -:  474:  SizeType block_size(SizeType n) const
        -:  475:  { 
        -:  476:    return block_size(id, n);
        -:  477:  }
        -:  478:
        -:  479:  template<typename SizeType, typename ProcessID>
        -:  480:  SizeType block_size(ProcessID id, SizeType n) const
        -:  481:  {
        -:  482:    // TBD: This is really lame :)
        -:  483:    int result = -1;
        -:  484:    while (n > 0) {
        -:  485:      --n;
        -:  486:      if ((*this)(n) == id && (int)local(n) > result) result = local(n);
        -:  487:    }
        -:  488:    ++result;
        -:  489:
        -:  490:    //    std::cerr << "Block size of id " << id << " is " << result << std::endl;
        -:  491:    return result;
        -:  492:  }
        -:  493:
        -:  494:  template<typename SizeType>
        -:  495:  SizeType operator()(SizeType i) const
        -:  496:  { 
        -:  497:    SizeType result = get_block_num(i) % p;
        -:  498:    //    std::cerr << "Item " << i << " goes on processor " << result << std::endl;
        -:  499:    return result;
        -:  500:  }
        -:  501:
        -:  502:  template<typename SizeType>
        -:  503:  SizeType local(SizeType i) const
        -:  504:  { 
        -:  505:    // Compute the start of the block
        -:  506:    std::size_t block_num = get_block_num(i);
        -:  507:    //    std::cerr << "Item " << i << " is in block #" << block_num << std::endl;
        -:  508:
        -:  509:    std::size_t local_block_num = block_num / p;
        -:  510:    std::size_t block_start = local_block_num * block_rows * block_columns;
        -:  511:
        -:  512:    // Compute the offset into the block 
        -:  513:    std::size_t data_row = i / data_columns_per_row;
        -:  514:    std::size_t data_col = i % data_columns_per_row;
        -:  515:    std::size_t block_offset = (data_row % block_rows) * block_columns 
        -:  516:                             + (data_col % block_columns);    
        -:  517:
        -:  518:    //    std::cerr << "Item " << i << " maps to local index " << block_start+block_offset << std::endl;
        -:  519:    return block_start + block_offset;
        -:  520:  }
        -:  521:
        -:  522: private:
        -:  523:  template<typename SizeType>
        -:  524:  std::size_t get_block_num(SizeType i) const
        -:  525:  {
        -:  526:    std::size_t data_row = i / data_columns_per_row;
        -:  527:    std::size_t data_col = i % data_columns_per_row;
        -:  528:    std::size_t block_row = data_row / block_rows;
        -:  529:    std::size_t block_col = data_col / block_columns;
        -:  530:    std::size_t blocks_in_row = data_columns_per_row / block_columns;
        -:  531:    std::size_t block_num = block_col * blocks_in_row + block_row;
        -:  532:    return global_to_local[block_num];
        -:  533:  }
        -:  534:
        -:  535:  std::size_t id;                   //< The ID number of this processor
        -:  536:  std::size_t p;                    //< The number of processors
        -:  537:  std::size_t block_rows;           //< The # of rows in each block
        -:  538:  std::size_t block_columns;        //< The # of columns in each block
        -:  539:  std::size_t data_columns_per_row; //< The # of columns per row of data
        -:  540:  std::vector<std::size_t> global_to_local;
        -:  541:};
        -:  542:
        -:  543:class random_distribution
        -:  544:{
        -:  545:  template<typename RandomNumberGen>
        -:  546:  struct random_int
        -:  547:  {
        -:  548:    explicit random_int(RandomNumberGen& gen) : gen(gen) { }
        -:  549:
        -:  550:    template<typename T>
        -:  551:    T operator()(T n) const
        -:  552:    {
        -:  553:      uniform_int<T> distrib(0, n-1);
        -:  554:      return distrib(gen);
        -:  555:    }
        -:  556:
        -:  557:  private:
        -:  558:    RandomNumberGen& gen;
        -:  559:  };
        -:  560:  
        -:  561: public:
        -:  562:  template<typename LinearProcessGroup, typename RandomNumberGen>
        -:  563:  random_distribution(const LinearProcessGroup& pg, RandomNumberGen& gen,
        -:  564:                      std::size_t n)
        -:  565:    : base(pg, n), local_to_global(n), global_to_local(n)
        -:  566:  {
        -:  567:    std::copy(make_counting_iterator(std::size_t(0)),
        -:  568:              make_counting_iterator(n),
        -:  569:              local_to_global.begin());
        -:  570:
        -:  571:#if defined(BOOST_NO_CXX98_RANDOM_SHUFFLE)
        -:  572:    std::shuffle(local_to_global.begin(), local_to_global.end(), gen);
        -:  573:#else
        -:  574:    random_int<RandomNumberGen> rand(gen);
        -:  575:    std::random_shuffle(local_to_global.begin(), local_to_global.end(), rand);
        -:  576:#endif
        -:  577:
        -:  578:    for (std::vector<std::size_t>::size_type i = 0; i < n; ++i)
        -:  579:      global_to_local[local_to_global[i]] = i;
        -:  580:  }
        -:  581:
        -:  582:  template<typename SizeType>
        -:  583:  SizeType block_size(SizeType n) const
        -:  584:  { return base.block_size(n); }
        -:  585:
        -:  586:  template<typename SizeType, typename ProcessID>
        -:  587:  SizeType block_size(ProcessID id, SizeType n) const
        -:  588:  { return base.block_size(id, n); }
        -:  589:
        -:  590:  template<typename SizeType>
        -:  591:  SizeType operator()(SizeType i) const
        -:  592:  {
        -:  593:    return base(global_to_local[i]);
        -:  594:  }
        -:  595:
        -:  596:  template<typename SizeType>
        -:  597:  SizeType local(SizeType i) const
        -:  598:  { 
        -:  599:    return base.local(global_to_local[i]);
        -:  600:  }
        -:  601:
        -:  602:  template<typename ProcessID, typename SizeType>
        -:  603:  SizeType global(ProcessID p, SizeType i) const
        -:  604:  { 
        -:  605:    return local_to_global[base.global(p, i)];
        -:  606:  }
        -:  607:
        -:  608:  template<typename SizeType>
        -:  609:  SizeType global(SizeType i) const
        -:  610:  { 
        -:  611:    return local_to_global[base.global(i)];
        -:  612:  }
        -:  613:
        -:  614: private:
        -:  615:  block base;
        -:  616:  std::vector<std::size_t> local_to_global;
        -:  617:  std::vector<std::size_t> global_to_local;
        -:  618:};
        -:  619:
        -:  620:} } // end namespace boost::parallel
        -:  621:
        -:  622:#endif // BOOST_PARALLEL_DISTRIBUTION_HPP
        -:  623:
