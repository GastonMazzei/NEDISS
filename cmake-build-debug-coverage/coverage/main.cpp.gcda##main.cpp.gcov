        -:    0:Source:/home/m4zz31/cppprojct/main.cpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/main.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:
        -:    3:#include "mpi.h"
        -:    4:#include "Utils/timers.h"
        -:    5:#include "Tests/graph-test-init.h"
        -:    6:#include "Tests/graph-test-singlestep-evolution.h"
        -:    7:#include "Utils/global_standard_messages.h"
        -:    8:#include "Utils/print_init.h"
        -:    9:#include "Utils/print_warnings.h"
        -:   10:#include "Utils/parallel_sanitizer.h"
        -:   11:#include "Tests/long-singlestep-run.h"
        -:   12:
        -:   13:#include "macros/macros.h"
        -:   14:
        -:   15:
        -:   16:using namespace std;
        -:   17:
        -:   18:
        -:   19://using namespace Eigen;
        -:   20:// Eigen is supposedly optimized for "using the entire processor",
        -:   21:// thus hyperthreading is counterproductive
        -:   22:// source: https://eigen.tuxfamily.org/dox/TopicMultiThreading.html
        -:   23://#define HYPERTHREADING 0      // 1 if hyperthreading is on, 0 otherwise
        -:   24:
function main called 1 returned 0% blocks executed 64%
        1:   25:int main(int argc, char** argv)
        1:   25-block  0
        -:   26:{
        -:   27:
        -:   28:    // START:
        -:   29:    //
        -:   30:    int rank;
        1:   31:    unsigned int SEED = 12345;
        1:   32:    MPI_Init(&argc, &argv);
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33:    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   34:    print_init(rank);
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   35:    print_warnings(rank);
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   36:    static int OMP_THREAD_LIMIT = std::stoi(std::getenv("OMP_THREAD_LIMIT"));
        1:   36-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   36-block  1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:   36-block  2
call    5 returned 1
call    6 returned 1
call    7 returned 1
branch  8 taken 1 (fallthrough)
branch  9 taken 0 (throw)
        1:   36-block  3
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   36-block  4
call   13 returned 1
call   14 returned 1
call   15 returned 1
    %%%%%:   36-block  5
call   16 never executed
    %%%%%:   36-block  6
    %%%%%:   36-block  7
call   17 never executed
    %%%%%:   36-block  8
    %%%%%:   36-block  9
branch 18 never executed
branch 19 never executed
    %%%%%:   36-block 10
call   20 never executed
    %%%%%:   36-block 11
        1:   37:    if (OMP_THREAD_LIMIT<3){error_report(min_threads);};
        1:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   37-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:   37-block  2
call    5 never executed
    %%%%%:   37-block  3
call    6 never executed
    %%%%%:   37-block  4
        1:   38:    check_nested_status();
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   39:
        -:   40:    // Testing Section ;-)
        1:   41:    const int NNodes = 200;
        1:   42:    const int NRUNS = 500;
        1:   43:    const double ErdosRenyiProba = 0.5;
        -:   44:    //graph_tests_init(SEED, NNodes, ErdosRenyiProba);
        -:   45:    //                  template param is the N of simultaneous requests
        -:   46:    //                  that each threaded requester does. It is also used
        -:   47:    //                  in the dispatcher framework in general without a clear interpretation.
        -:   48:    //                  it is generally called "BATCH".
        -:   49:    //graph_tests_singlestep_evolution<8>(SEED,
        -:   50://                                        NNodes,
        -:   51://                                        ErdosRenyiProba);
        1:   52:    central_test_long_singlestep_run<8>(SEED,
        1:   52-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   53:                                      NNodes,
        -:   54:                                      ErdosRenyiProba,
        -:   55:                                      NRUNS);
        -:   56:
        -:   57:
        -:   58:    // END:
        -:   59:    //
        1:   60:    if (rank == 0) {
        1:   60-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   61:        cout << "End of script has been reached" << endl;
        1:   61-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   61-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   61-block  2
        -:   62:    }
        1:   63:    int exit_status = MPI_Finalize();
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   64:
        1:   65:    exit(0); // prevents valgrind from tagging it as definetely lost :O
        1:   65-block  0
call    0 returned 0
        -:   66:    //return exit_status;
function _GLOBAL__sub_I__Z19check_nested_statusv called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_1ii called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 66%
        6:   67:}
        1:   67-block  0
        1:   67-block  1
call    0 returned 1
call    1 returned 1
        1:   67-block  2
        1:   67-block  3
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   67-block  4
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   67-block  5
        1:   67-block  6
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:   67-block  7
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:   67-block  8
