        -:    0:Source:/usr/include/boost/archive/detail/common_iarchive.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/long-singlestep-run.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/long-singlestep-run.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_ARCHIVE_DETAIL_COMMON_IARCHIVE_HPP
        -:    2:#define BOOST_ARCHIVE_DETAIL_COMMON_IARCHIVE_HPP
        -:    3:
        -:    4:// MS compatible compilers support #pragma once
        -:    5:#if defined(_MSC_VER)
        -:    6:# pragma once
        -:    7:#endif
        -:    8:
        -:    9://///////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
        -:   10:// common_iarchive.hpp
        -:   11:
        -:   12:// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
        -:   13:// Use, modification and distribution is subject to the Boost Software
        -:   14:// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:   15:// http://www.boost.org/LICENSE_1_0.txt)
        -:   16:
        -:   17://  See http://www.boost.org for updates, documentation, and revision history.
        -:   18:
        -:   19:#include <boost/config.hpp>
        -:   20:
        -:   21:#include <boost/archive/detail/basic_iarchive.hpp>
        -:   22:#include <boost/archive/detail/basic_pointer_iserializer.hpp>
        -:   23:#include <boost/archive/detail/interface_iarchive.hpp>
        -:   24:
        -:   25:#ifdef BOOST_MSVC
        -:   26:#  pragma warning(push)
        -:   27:#  pragma warning(disable : 4511 4512)
        -:   28:#endif
        -:   29:
        -:   30:namespace boost {
        -:   31:namespace archive {
        -:   32:namespace detail {
        -:   33:
        -:   34:class extended_type_info;
        -:   35:
        -:   36:// note: referred to as Curiously Recurring Template Patter (CRTP)
        -:   37:template<class Archive>
        -:   38:class BOOST_SYMBOL_VISIBLE common_iarchive :
        -:   39:    public basic_iarchive,
        -:   40:    public interface_iarchive<Archive>
        -:   41:{
        -:   42:    friend class interface_iarchive<Archive>;
        -:   43:    friend class basic_iarchive;
        -:   44:private:
        -:   45:    void vload(version_type & t) BOOST_OVERRIDE {
        -:   46:        * this->This() >> t;
        -:   47:    }
        -:   48:    void vload(object_id_type & t) BOOST_OVERRIDE {
        -:   49:        * this->This() >> t;
        -:   50:    }
        -:   51:    void vload(class_id_type & t) BOOST_OVERRIDE {
        -:   52:        * this->This() >> t;
        -:   53:    }
        -:   54:    void vload(class_id_optional_type & t) BOOST_OVERRIDE {
        -:   55:        * this->This() >> t;
        -:   56:    }
        -:   57:    void vload(tracking_type & t) BOOST_OVERRIDE {
        -:   58:        * this->This() >> t;
        -:   59:    }
        -:   60:    void vload(class_name_type &s) BOOST_OVERRIDE {
        -:   61:        * this->This() >> s;
        -:   62:    }
        -:   63:protected:
        -:   64:    // default processing - invoke serialization library
        -:   65:    template<class T>
function _ZN5boost7archive6detail15common_iarchiveINS_3mpi15packed_iarchiveEE13load_overrideIKNS_13serialization13array_wrapperIdEEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost7archive6detail15common_iarchiveINS_3mpi15packed_iarchiveEE13load_overrideIKNS_13serialization3nvpIjEEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost7archive6detail15common_iarchiveINS_3mpi15packed_iarchiveEE13load_overrideIKNS_13serialization3nvpINS7_20collection_size_typeEEEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost7archive6detail15common_iarchiveINS_3mpi15packed_iarchiveEE13load_overrideISt6vectorIdSaIdEEEEvRT_ called 0 returned 0% blocks executed 0%
    #####:   66:    void load_override(T & t){
    $$$$$:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
    $$$$$:   66-block  3
    #####:   67:        archive::load(* this->This(), t);
    $$$$$:   67-block  0
call    0 never executed
call    1 never executed
    $$$$$:   67-block  1
call    2 never executed
call    3 never executed
    $$$$$:   67-block  2
call    4 never executed
call    5 never executed
    $$$$$:   67-block  3
call    6 never executed
call    7 never executed
    #####:   68:    }
        -:   69:    // default implementations of functions which emit start/end tags for
        -:   70:    // archive types that require them.
        -:   71:    void load_start(const char * /*name*/){}
        -:   72:    void load_end(const char * /*name*/){}
        -:   73:    // default archive initialization
        -:   74:    common_iarchive(unsigned int flags = 0) :
        -:   75:        basic_iarchive(flags),
        -:   76:        interface_iarchive<Archive>()
        -:   77:    {}
        -:   78:};
        -:   79:
        -:   80:} // namespace detail
        -:   81:} // namespace archive
        -:   82:} // namespace boost
        -:   83:
        -:   84:#ifdef BOOST_MSVC
        -:   85:#pragma warning(pop)
        -:   86:#endif
        -:   87:
        -:   88:#endif // BOOST_ARCHIVE_DETAIL_COMMON_IARCHIVE_HPP
