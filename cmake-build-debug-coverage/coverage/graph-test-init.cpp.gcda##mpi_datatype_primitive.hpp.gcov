        -:    0:Source:/usr/include/boost/mpi/detail/mpi_datatype_primitive.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// (C) Copyright 2005 Matthias Troyer
        -:    2:
        -:    3:// Use, modification and distribution is subject to the Boost Software
        -:    4:// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    5:// http://www.boost.org/LICENSE_1_0.txt)
        -:    6:
        -:    7://  Authors: Matthias Troyer
        -:    8:
        -:    9:#ifndef BOOST_MPI_DETAIL_MPI_DATATYPE_OPRIMITIVE_HPP
        -:   10:#define BOOST_MPI_DETAIL_MPI_DATATYPE_OPRIMITIVE_HPP
        -:   11:
        -:   12:#include <boost/mpi/config.hpp>
        -:   13:#include <cstddef> // size_t
        -:   14:
        -:   15:#include <boost/config.hpp>
        -:   16:#if defined(BOOST_NO_STDC_NAMESPACE)
        -:   17:namespace std{
        -:   18:    using ::size_t;
        -:   19:} // namespace std
        -:   20:#endif
        -:   21:
        -:   22:#include <boost/mpi/datatype_fwd.hpp>
        -:   23:#include <boost/mpi/exception.hpp>
        -:   24:#include <boost/mpi/detail/antiques.hpp>
        -:   25:#include <boost/throw_exception.hpp>
        -:   26:#include <boost/assert.hpp>
        -:   27:#include <boost/mpl/placeholders.hpp>
        -:   28:#include <boost/serialization/array.hpp>
        -:   29:#include <stdexcept>
        -:   30:#include <iostream>
        -:   31:#include <vector>
        -:   32:#include <boost/mpi/detail/antiques.hpp>
        -:   33:
        -:   34:namespace boost { namespace mpi { namespace detail {
        -:   35:
        -:   36://///////////////////////////////////////////////////////////////////////
        -:   37:// class mpi_data_type_oprimitive - creation of custom MPI data types
        -:   38:
function _ZN5boost3mpi6detail22mpi_datatype_primitiveD2Ev called 0 returned 0% blocks executed 0%
    #####:   39:class mpi_datatype_primitive
    $$$$$:   39-block  0
    $$$$$:   39-block  1
call    0 never executed
call    1 never executed
call    2 never executed
        -:   40:{
        -:   41:public:
        -:   42:
        -:   43:    // trivial default constructor
        -:   44:    mpi_datatype_primitive()
        -:   45:     : is_committed(false),
        -:   46:       origin(0)
        -:   47:    {}
        -:   48:
function _ZN5boost3mpi6detail22mpi_datatype_primitiveC2EPKv called 0 returned 0% blocks executed 0%
    #####:   49:    mpi_datatype_primitive(void const* orig)
    $$$$$:   49-block  0
    #####:   50:     : is_committed(false),
    #####:   51:       origin()
    $$$$$:   51-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    %%%%%:   51-block  1
call    3 never executed
    %%%%%:   51-block  2
call    4 never executed
    %%%%%:   51-block  3
call    5 never executed
        -:   52:    {
        -:   53:#if BOOST_MPI_VERSION >= 2
    #####:   54:      BOOST_MPI_CHECK_RESULT(MPI_Get_address,(const_cast<void*>(orig), &origin));
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   54-block  0
branch  3 never executed
branch  4 never executed
    $$$$$:   54-block  1
call    5 never executed
    $$$$$:   54-block  2
branch  6 never executed
branch  7 never executed
    $$$$$:   54-block  3
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:   54-block  4
call   11 never executed
    %%%%%:   54-block  5
call   12 never executed
    %%%%%:   54-block  6
        -:   55:#else
        -:   56:      BOOST_MPI_CHECK_RESULT(MPI_Address,(const_cast<void*>(orig), &origin));
        -:   57:#endif
    #####:   58:    }
    $$$$$:   58-block  0
        -:   59:
        -:   60:    void save_binary(void const *address, std::size_t count)
        -:   61:    {
        -:   62:      save_impl(address,MPI_BYTE,count);
        -:   63:    }
        -:   64:
        -:   65:    // fast saving of arrays of MPI types
        -:   66:    template<class T>
        -:   67:    void save_array(serialization::array_wrapper<T> const& x, unsigned int /* version */)
        -:   68:    {
        -:   69:      if (x.count())
        -:   70:        save_impl(x.address(), boost::mpi::get_mpi_datatype(*x.address()), x.count());
        -:   71:    }
        -:   72:
        -:   73:    typedef is_mpi_datatype<mpl::_1> use_array_optimization;
        -:   74:
        -:   75:    // create and return the custom MPI data type
function _ZN5boost3mpi6detail22mpi_datatype_primitive16get_mpi_datatypeEv called 0 returned 0% blocks executed 0%
    #####:   76:    MPI_Datatype get_mpi_datatype()
    $$$$$:   76-block  0
        -:   77:    {
    #####:   78:      if (!is_committed)
    $$$$$:   78-block  0
branch  0 never executed
branch  1 never executed
        -:   79:      {
        -:   80:#if BOOST_MPI_VERSION >= 2
    #####:   81:       BOOST_MPI_CHECK_RESULT(MPI_Type_create_struct,
    $$$$$:   81-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:   81-block  1
call    7 never executed
    $$$$$:   81-block  2
branch  8 never executed
branch  9 never executed
    $$$$$:   81-block  3
call   10 never executed
call   11 never executed
    %%%%%:   81-block  4
call   12 never executed
    %%%%%:   81-block  5
call   13 never executed
        -:   82:                    (
        -:   83:                      addresses.size(),
        -:   84:                      c_data(lengths),
        -:   85:                      c_data(addresses),
        -:   86:                      c_data(types),
        -:   87:                      &datatype_
        -:   88:                    ));
        -:   89:#else
        -:   90:        BOOST_MPI_CHECK_RESULT(MPI_Type_struct,
        -:   91:                               (
        -:   92:                                addresses.size(),
        -:   93:                                c_data(lengths),
        -:   94:                                c_data(addresses),
        -:   95:                                c_data(types),
        -:   96:                                &datatype_
        -:   97:                                ));
        -:   98:#endif
    #####:   99:        BOOST_MPI_CHECK_RESULT(MPI_Type_commit,(&datatype_));
    $$$$$:   99-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   99-block  1
call    3 never executed
    $$$$$:   99-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:   99-block  3
call    6 never executed
call    7 never executed
    %%%%%:   99-block  4
call    8 never executed
        -:  100:        
    #####:  101:        is_committed = true;
    $$$$$:  101-block  0
        -:  102:      }
        -:  103:
    #####:  104:      return datatype_;
    $$$$$:  104-block  0
    $$$$$:  104-block  1
        -:  105:    }
        -:  106:
        -:  107:    // default saving of primitives.
        -:  108:    template<class T>
function _ZN5boost3mpi6detail22mpi_datatype_primitive4saveIlEEvRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi6detail22mpi_datatype_primitive4saveIsEEvRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi6detail22mpi_datatype_primitive4saveImEEvRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi6detail22mpi_datatype_primitive4saveIbEEvRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi6detail22mpi_datatype_primitive4saveIiEEvRKT_ called 0 returned 0% blocks executed 0%
    #####:  109:    void save(const T & t)
    $$$$$:  109-block  0
    $$$$$:  109-block  1
    $$$$$:  109-block  2
    $$$$$:  109-block  3
    $$$$$:  109-block  4
        -:  110:    {
    #####:  111:        save_impl(&t, boost::mpi::get_mpi_datatype(t), 1);
    $$$$$:  111-block  0
call    0 never executed
call    1 never executed
    $$$$$:  111-block  1
call    2 never executed
call    3 never executed
    $$$$$:  111-block  2
call    4 never executed
call    5 never executed
    $$$$$:  111-block  3
call    6 never executed
call    7 never executed
    $$$$$:  111-block  4
call    8 never executed
call    9 never executed
    #####:  112:    }
        -:  113:
        -:  114:private:
        -:  115:
function _ZN5boost3mpi6detail22mpi_datatype_primitive9save_implEPKvP15ompi_datatype_ti called 0 returned 0% blocks executed 0%
    #####:  116:    void save_impl(void const * p, MPI_Datatype t, int l)
    $$$$$:  116-block  0
        -:  117:    {
    #####:  118:      BOOST_ASSERT ( !is_committed );
    $$$$$:  118-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  118-block  1
call    2 never executed
        -:  119:
        -:  120:      // store address, type and length
        -:  121:
        -:  122:      MPI_Aint a;
        -:  123:#if BOOST_MPI_VERSION >= 2
    #####:  124:     BOOST_MPI_CHECK_RESULT(MPI_Get_address,(const_cast<void*>(p), &a));
    $$$$$:  124-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  124-block  1
branch  3 never executed
branch  4 never executed
    $$$$$:  124-block  2
call    5 never executed
    $$$$$:  124-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  124-block  4
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:  124-block  5
call   11 never executed
    %%%%%:  124-block  6
call   12 never executed
    %%%%%:  124-block  7
        -:  125:#else
        -:  126:     BOOST_MPI_CHECK_RESULT(MPI_Address,(const_cast<void*>(p), &a));
        -:  127:#endif
    #####:  128:      addresses.push_back(a-origin);
    $$$$$:  128-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  128-block  1
    #####:  129:      types.push_back(t);
    $$$$$:  129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:      lengths.push_back(l);
    $$$$$:  130-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  131:    }
    $$$$$:  131-block  0
        -:  132:
        -:  133:    template <class T>
        -:  134:    static T* get_data(std::vector<T>& v)
        -:  135:    {
        -:  136:      return detail::c_data(v);
        -:  137:    }
        -:  138:
        -:  139:    std::vector<MPI_Aint> addresses;
        -:  140:    std::vector<MPI_Datatype> types;
        -:  141:    std::vector<int> lengths;
        -:  142:
        -:  143:    bool is_committed;
        -:  144:    MPI_Datatype datatype_;
        -:  145:    MPI_Aint origin;
        -:  146:};
        -:  147:
        -:  148:
        -:  149:} } } // end namespace boost::mpi::detail
        -:  150:
        -:  151:
        -:  152:#endif // BOOST_MPI_DETAIL_MPI_DATATYPE_OPRIMITIVE_HPP
