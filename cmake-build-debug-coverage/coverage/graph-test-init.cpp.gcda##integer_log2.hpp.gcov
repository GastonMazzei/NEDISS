        -:    0:Source:/usr/include/boost/random/detail/integer_log2.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* boost random/detail/integer_log2.hpp header file
        -:    2: *
        -:    3: * Copyright Steven Watanabe 2011
        -:    4: * Distributed under the Boost Software License, Version 1.0. (See
        -:    5: * accompanying file LICENSE_1_0.txt or copy at
        -:    6: * http://www.boost.org/LICENSE_1_0.txt)
        -:    7: *
        -:    8: * See http://www.boost.org for most recent version including documentation.
        -:    9: *
        -:   10: * $Id$
        -:   11: *
        -:   12: */
        -:   13:
        -:   14:#ifndef BOOST_RANDOM_DETAIL_INTEGER_LOG2_HPP
        -:   15:#define BOOST_RANDOM_DETAIL_INTEGER_LOG2_HPP
        -:   16:
        -:   17:#include <boost/config.hpp>
        -:   18:#include <boost/limits.hpp>
        -:   19:#include <boost/integer/integer_log2.hpp>
        -:   20:
        -:   21:namespace boost {
        -:   22:namespace random {
        -:   23:namespace detail {
        -:   24:
        -:   25:#if !defined(BOOST_NO_CXX11_CONSTEXPR)
        -:   26:#define BOOST_RANDOM_DETAIL_CONSTEXPR constexpr
        -:   27:#elif defined(BOOST_MSVC)
        -:   28:#define BOOST_RANDOM_DETAIL_CONSTEXPR __forceinline
        -:   29:#elif defined(__GNUC__) && __GNUC__ >= 4
        -:   30:#define BOOST_RANDOM_DETAIL_CONSTEXPR inline __attribute__((__const__)) __attribute__((__always_inline__))
        -:   31:#else
        -:   32:#define BOOST_RANDOM_DETAIL_CONSTEXPR inline
        -:   33:#endif
        -:   34:
        -:   35:template<int Shift>
        -:   36:struct integer_log2_impl
        -:   37:{
        -:   38:#if defined(BOOST_NO_CXX11_CONSTEXPR)
        -:   39:    template<class T>
        -:   40:    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply(T t, int accum)
        -:   41:    {
        -:   42:        int update = ((t >> Shift) != 0) * Shift;
        -:   43:        return integer_log2_impl<Shift / 2>::apply(t >> update, accum + update);
        -:   44:    }
        -:   45:#else
        -:   46:    template<class T>
function _ZN5boost6random6detail17integer_log2_implILi2EE6apply2ImEEiT_ii called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi4EE6apply2ImEEiT_ii called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi8EE6apply2ImEEiT_ii called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi16EE6apply2ImEEiT_ii called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi32EE6apply2ImEEiT_ii called 0 returned 0% blocks executed 0%
    #####:   47:    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply2(T t, int accum, int update)
    $$$$$:   47-block  0
    $$$$$:   47-block  1
    $$$$$:   47-block  2
    $$$$$:   47-block  3
    $$$$$:   47-block  4
        -:   48:    {
    #####:   49:        return integer_log2_impl<Shift / 2>::apply(t >> update, accum + update);
    $$$$$:   49-block  0
call    0 never executed
    $$$$$:   49-block  1
call    1 never executed
    $$$$$:   49-block  2
call    2 never executed
    $$$$$:   49-block  3
call    3 never executed
    $$$$$:   49-block  4
call    4 never executed
        -:   50:    }
        -:   51:
        -:   52:    template<class T>
function _ZN5boost6random6detail17integer_log2_implILi2EE5applyImEEiT_i called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi4EE5applyImEEiT_i called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi8EE5applyImEEiT_i called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi16EE5applyImEEiT_i called 0 returned 0% blocks executed 0%
function _ZN5boost6random6detail17integer_log2_implILi32EE5applyImEEiT_i called 0 returned 0% blocks executed 0%
    #####:   53:    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply(T t, int accum)
    $$$$$:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
    $$$$$:   53-block  3
    $$$$$:   53-block  4
        -:   54:    {
    #####:   55:        return apply2(t, accum, ((t >> Shift) != 0) * Shift);
    $$$$$:   55-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   55-block  1
    $$$$$:   55-block  2
    $$$$$:   55-block  3
call    2 never executed
    $$$$$:   55-block  4
branch  3 never executed
branch  4 never executed
    $$$$$:   55-block  5
    $$$$$:   55-block  6
    $$$$$:   55-block  7
call    5 never executed
    $$$$$:   55-block  8
branch  6 never executed
branch  7 never executed
    $$$$$:   55-block  9
    $$$$$:   55-block 10
    $$$$$:   55-block 11
call    8 never executed
    $$$$$:   55-block 12
branch  9 never executed
branch 10 never executed
    $$$$$:   55-block 13
    $$$$$:   55-block 14
    $$$$$:   55-block 15
call   11 never executed
    $$$$$:   55-block 16
branch 12 never executed
branch 13 never executed
    $$$$$:   55-block 17
    $$$$$:   55-block 18
    $$$$$:   55-block 19
call   14 never executed
        -:   56:    }
        -:   57:#endif
        -:   58:};
        -:   59:
        -:   60:template<>
        -:   61:struct integer_log2_impl<1>
        -:   62:{
        -:   63:    template<class T>
function _ZN5boost6random6detail17integer_log2_implILi1EE5applyImEEiT_i called 0 returned 0% blocks executed 0%
    #####:   64:    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply(T t, int accum)
    $$$$$:   64-block  0
        -:   65:    {
    #####:   66:        return int(t >> 1) + accum;
    $$$$$:   66-block  0
        -:   67:    }
        -:   68:};
        -:   69:
        -:   70:template<class T>
function _ZN5boost6random6detail12integer_log2ImEEiT_ called 0 returned 0% blocks executed 0%
    #####:   71:BOOST_RANDOM_DETAIL_CONSTEXPR int integer_log2(T t)
    $$$$$:   71-block  0
        -:   72:{
        -:   73:    return integer_log2_impl<
        -:   74:        ::boost::detail::max_pow2_less<
        -:   75:            ::std::numeric_limits<T>::digits, 4
        -:   76:        >::value
    #####:   77:    >::apply(t, 0);
    $$$$$:   77-block  0
call    0 never executed
        -:   78:}
        -:   79:
        -:   80:} // namespace detail
        -:   81:} // namespace random
        -:   82:} // namespace boost
        -:   83:
        -:   84:#endif // BOOST_RANDOM_DETAIL_INTEGER_LOG2_HPP
