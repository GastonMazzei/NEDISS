        -:    0:Source:/usr/include/boost/system/detail/system_category_impl.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Utils/HelperClasses.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Utils/HelperClasses.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_SYSTEM_DETAIL_SYSTEM_CATEGORY_IMPL_HPP_INCLUDED
        -:    2:#define BOOST_SYSTEM_DETAIL_SYSTEM_CATEGORY_IMPL_HPP_INCLUDED
        -:    3:
        -:    4://  Copyright Beman Dawes 2006, 2007
        -:    5://  Copyright Christoper Kohlhoff 2007
        -:    6://  Copyright Peter Dimov 2017, 2018, 2020
        -:    7://
        -:    8://  Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9://  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10://
        -:   11://  See library home page at http://www.boost.org/libs/system
        -:   12:
        -:   13:#include <boost/system/detail/system_category.hpp>
        -:   14:#include <boost/system/detail/error_condition.hpp>
        -:   15:#include <boost/system/api_config.hpp>
        -:   16:
        -:   17:#if !defined(BOOST_POSIX_API) && !defined(BOOST_WINDOWS_API)
        -:   18:#  error BOOST_POSIX_API or BOOST_WINDOWS_API must be defined
        -:   19:#endif
        -:   20:
        -:   21:// system_error_category implementation
        -:   22:
        -:   23:#if defined(BOOST_WINDOWS_API)
        -:   24:
        -:   25:#include <boost/system/detail/system_category_message_win32.hpp>
        -:   26:#include <boost/system/detail/system_category_condition_win32.hpp>
        -:   27:
        -:   28:inline boost::system::error_condition boost::system::detail::system_error_category::default_error_condition( int ev ) const BOOST_NOEXCEPT
        -:   29:{
        -:   30:    int e2 = system_category_condition_win32( ev );
        -:   31:
        -:   32:    if( e2 == -1 )
        -:   33:    {
        -:   34:        return error_condition( ev, *this );
        -:   35:    }
        -:   36:    else
        -:   37:    {
        -:   38:        return error_condition( boost::system::detail::generic_value_tag( e2 ) );
        -:   39:    }
        -:   40:}
        -:   41:
        -:   42:inline std::string boost::system::detail::system_error_category::message( int ev ) const
        -:   43:{
        -:   44:    return system_category_message_win32( ev );
        -:   45:}
        -:   46:
        -:   47:inline char const * boost::system::detail::system_error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
        -:   48:{
        -:   49:    return system_category_message_win32( ev, buffer, len );
        -:   50:}
        -:   51:
        -:   52:#else // #if defined(BOOST_WINDOWS_API)
        -:   53:
        -:   54:#include <boost/system/detail/generic_category_message.hpp>
        -:   55:
function _ZNK5boost6system6detail21system_error_category23default_error_conditionEi called 0 returned 0% blocks executed 0%
    #####:   56:inline boost::system::error_condition boost::system::detail::system_error_category::default_error_condition( int ev ) const BOOST_NOEXCEPT
    $$$$$:   56-block  0
        -:   57:{
    #####:   58:    return error_condition( boost::system::detail::generic_value_tag( ev ) );
    $$$$$:   58-block  0
call    0 never executed
call    1 never executed
        -:   59:}
        -:   60:
function _ZNK5boost6system6detail21system_error_category7messageB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####:   61:inline std::string boost::system::detail::system_error_category::message( int ev ) const
    $$$$$:   61-block  0
        -:   62:{
    #####:   63:    return generic_error_category_message( ev );
    $$$$$:   63-block  0
call    0 never executed
        -:   64:}
        -:   65:
function _ZNK5boost6system6detail21system_error_category7messageEiPcm called 0 returned 0% blocks executed 0%
    #####:   66:inline char const * boost::system::detail::system_error_category::message( int ev, char * buffer, std::size_t len ) const BOOST_NOEXCEPT
    $$$$$:   66-block  0
        -:   67:{
    #####:   68:    return generic_error_category_message( ev, buffer, len );
    $$$$$:   68-block  0
call    0 never executed
        -:   69:}
        -:   70:
        -:   71:#endif // #if defined(BOOST_WINDOWS_API)
        -:   72:
        -:   73:#endif // #ifndef BOOST_SYSTEM_DETAIL_SYSTEM_CATEGORY_IMPL_HPP_INCLUDED
