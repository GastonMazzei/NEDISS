        -:    0:Source:/home/m4zz31/cppprojct/GraphClasses/GeneralGraph.h
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by m4zz31 on 29/10/21.
        -:    3://
        -:    4:
        -:    5:#ifndef CPPPROJCT_GENERALGRAPH_H
        -:    6:#define CPPPROJCT_GENERALGRAPH_H
        -:    7:
        -:    8:#include  <iostream>
        -:    9:#include <Eigen/Sparse>
        -:   10:#include <string>
        -:   11:#include "../Utils/error.h"
        -:   12:
        -:   13:#include "../macros/macros.h"
        -:   14:
        -:   15:#include <omp.h>
        -:   16:#include <vector>
        -:   17:#include <algorithm>
        -:   18:
        -:   19:
        -:   20:#include <boost/mpi.hpp>
        -:   21:#include <boost/graph/use_mpi.hpp>
        -:   22:#include <boost/graph/distributed/mpi_process_group.hpp>
        -:   23:#include <boost/graph/distributed/adjacency_list.hpp>
        -:   24:#include <boost/graph/distributed/named_graph.hpp>
        -:   25:#include <boost/graph/parallel/process_group.hpp>
        -:   26:#include <boost/assert.hpp>
        -:   27:#include <boost/property_map/property_map.hpp>
        -:   28:#include <boost/property_map/parallel/distributed_property_map.hpp>
        -:   29:#include <boost/property_map/parallel/caching_property_map.hpp>
        -:   30:#include <boost/graph/parallel/algorithm.hpp>
        -:   31:#include <boost/graph/connected_components.hpp>
        -:   32:#include <boost/graph/parallel/process_group.hpp>
        -:   33:#include <boost/property_map/parallel/distributed_property_map.hpp>
        -:   34:#include <boost/property_map/parallel/local_property_map.hpp>
        -:   35:#include <boost/random/linear_congruential.hpp>
        -:   36:#include <boost/graph/erdos_renyi_generator.hpp>
        -:   37:#include <boost/graph/adjacency_list.hpp>
        -:   38:#include <boost/graph/named_graph.hpp>
        -:   39:#include <boost/graph/graph_traits.hpp>
        -:   40:#include <boost/random/linear_congruential.hpp>
        -:   41:#include <boost/graph/erdos_renyi_generator.hpp>
        -:   42:
        -:   43:
        -:   44:// Dynamic Nodes are the elements we want to evolve over time
        -:   45:// it should have:
        -:   46:// (1) its value:
        -:   47://      - 1 dimensional for Kuramoto
        -:   48://      - 3 dimensional for Rossler Oscillators
        -:   49://      - something still unclear for the d(A)_t \propto \laplace^\alpha (A) model
        -:   50:// (2) params:
        -:   51://      - an N-dimensional array with its own properties: characteristic frequency for example
        -:   52:// (3) temoral register:
        -:   53://      - store the result of operations aand keep it for some time
function _ZN11DynamicNodeC2EOS_ called 0 returned 0% blocks executed 0%
function _ZN11DynamicNodeC2ERKS_ called 0 returned 0% blocks executed 0%
function _ZN11DynamicNodeD2Ev called 0 returned 0% blocks executed 0%
    #####:   54:struct DynamicNode {
    $$$$$:   54-block  0
    $$$$$:   54-block  1
call    0 never executed
    $$$$$:   54-block  2
    $$$$$:   54-block  3
call    1 never executed
    $$$$$:   54-block  4
    $$$$$:   54-block  5
call    2 never executed
        -:   55:    double value = 0;
        -:   56:    double temporal_register = 0;
function _ZN11DynamicNodeC2Ev called 0 returned 0% blocks executed 0%
    #####:   57:    DynamicNode() = default;
    $$$$$:   57-block  0
    $$$$$:   57-block  1
call    0 never executed
        -:   58:    DynamicNode(double i): value(i) {};
        -:   59:    std::vector<double> params;
        -:   60:    template<typename Archiver> /*version is const unsigned int*/
function _ZN11DynamicNode9serializeIN5boost3mpi15packed_iarchiveEEEvRT_j called 0 returned 0% blocks executed 0%
    #####:   61:    void serialize(Archiver& ar, const unsigned int /*version*/) {
    $$$$$:   61-block  0
    #####:   62:        ar & value & params ;
    $$$$$:   62-block  0
call    0 never executed
call    1 never executed
    #####:   63:    }
        -:   64:};
        -:   65:
        -:   66:
        -:   67:// Edges should have  a (double precission) value which will always
        -:   68:// account for some sort of "interaction"
        -:   69:struct DynamicEdge {
function _ZN11DynamicEdgeC2Ev called 0 returned 0% blocks executed 0%
    #####:   70:    DynamicEdge() = default;
    $$$$$:   70-block  0
        -:   71:    DynamicEdge(double i): value(i) {};
        -:   72:    double value = 1;
        -:   73:    // Serialization support is required!
        -:   74:    template<typename Archiver>
function _ZN11DynamicEdge9serializeIN5boost3mpi15packed_iarchiveEEEvRT_j called 0 returned 0% blocks executed 0%
function _ZN11DynamicEdge9serializeIN5boost3mpi15packed_oarchiveEEEvRT_j called 0 returned 0% blocks executed 0%
    #####:   75:    void serialize(Archiver& ar, const unsigned int /*version*/) {
    $$$$$:   75-block  0
    $$$$$:   75-block  1
    #####:   76:        ar & value;
    $$$$$:   76-block  0
call    0 never executed
    $$$$$:   76-block  1
call    1 never executed
    #####:   77:    }
        -:   78:};
        -:   79:
        -:   80:// Unclear if it is necessary
        -:   81:typedef DynamicNode DynamicNode;
        -:   82:typedef DynamicEdge DynamicEdge;
        -:   83:
        -:   84:
        -:   85:// A central object in this work: the "Graph" type
        -:   86:typedef boost::adjacency_list<boost::vecS,
        -:   87:        boost::distributedS<boost::graph::distributed::mpi_process_group, boost::vecS>,
        -:   88:        boost::bidirectionalS,
        -:   89:        DynamicNode,
        -:   90:        DynamicEdge>
        -:   91://        boost::property<DynamicNode, boost::vertex_index_t>,
        -:   92://        boost::property<DynamicEdge, boost::edge_index_t>>
        -:   93:    Graph;
        -:   94:
        -:   95:
        -:   96:
        -:   97:// Useful types :-)
        -:   98://property_map<Graph, capacity_t>::type capacity
        -:   99://        = get(capacity_t(), G);
        -:  100://property_map<Graph, flow_t>::type flow
        -:  101://        = get(flow_t(), G);
        -:  102://
        -:  103:// those can be accessed according to what is explained  here:
        -:  104:// https://www.boost.org/doc/libs/1_77_0/libs/graph/doc/using_adjacency_list.html
        -:  105://
        -:  106:typedef boost::property_map<Graph, boost::vertex_index_t>::const_type IndexMap;
        -:  107://typedef boost::property_map<Graph, double DynamicEdge::*>::type DynamicEdgeMap;
        -:  108://typedef boost::iterator_property_map<std::vector<double>::iterator, DynamicEdgeMap> DynamicEdgeCentralMap;
        -:  109:typedef boost::iterator_property_map<std::vector<int>::iterator, IndexMap> CentralMap;
        -:  110:typedef boost::graph_traits<Graph>::vertex_iterator vertex_iterator;
        -:  111:typedef boost::graph_traits<Graph>::edge_iterator edge_iterator;
        -:  112:typedef boost::property_map<Graph, boost::vertex_owner_t>::const_type OwnerMap;
        -:  113:typedef boost::property_map<Graph, boost::edge_owner_t>::const_type EdgeOwnerMap;
        -:  114:typedef boost::property_map<Graph, boost::vertex_local_t>::const_type LocalVertexMap;
        -:  115:typedef boost::property_map<Graph, boost::vertex_global_t>::const_type GlobalVertexMap;
        -:  116:
        -:  117:// ---------------------------------------------------------------------------------
        -:  118:// AN ANSWER IN STACKOVERFLOW (https://stackoverflow.com/questions/68936738/iterate-over-bundled-properties-in-boost-graph-in-a-direct-way)
        -:  119:// TO THE PROBLEM OF NOT BEING ABLE TO BUILD A VERTEX LIST ADAPTOR AFTER https://www.boost.org/doc/libs/1_77_0/libs/graph_parallel/doc/html/vertex_list_adaptor.html
        -:  120:// ---------------------------------------------------------------------------------
        -:  121://#include <boost/graph/adjacency_list.hpp>
        -:  122:#include <boost/range/adaptors.hpp>
        -:  123://using boost::adaptors::transformed;
        -:  124:
        -:  125:
        -:  126:class CommonGraphObjectClass{
        -:  127:    public:
        -:  128:        //using vertex = typename graph::vertex_descriptor
        -:  129:        void showVertex(Graph & g);
        -:  130:        void showEdges(Graph & g);
        -:  131:        void reportNProcs(Graph & g);
        -:  132:        void reportNodes(Graph &g);
        -:  133:        void kuramoto_initialization(std::vector<std::pair<double, double>> X0_W, double J, Graph & g, unsigned int N);
        -:  134:};
        -:  135:
        -:  136:
        -:  137:#endif //CPPPROJCT_GENERALGRAPH_H
        -:  138:
        -:  139:
        -:  140:
        -:  141://    int world_rank;
        -:  142://    int world_size;
        -:  143://
        -:  144://    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);
        -:  145://    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
