        -:    0:Source:/usr/include/boost/throw_exception.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/GraphClasses/CliqueGraph.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/GraphClasses/CliqueGraph.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_THROW_EXCEPTION_HPP_INCLUDED
        -:    2:#define BOOST_THROW_EXCEPTION_HPP_INCLUDED
        -:    3:
        -:    4:// MS compatible compilers support #pragma once
        -:    5:
        -:    6:#if defined(_MSC_VER) && (_MSC_VER >= 1020)
        -:    7:# pragma once
        -:    8:#endif
        -:    9:
        -:   10://
        -:   11://  boost/throw_exception.hpp
        -:   12://
        -:   13://  Copyright (c) 2002, 2018, 2019 Peter Dimov
        -:   14://  Copyright (c) 2008-2009 Emil Dotchevski and Reverge Studios, Inc.
        -:   15://
        -:   16://  Distributed under the Boost Software License, Version 1.0. (See
        -:   17://  accompanying file LICENSE_1_0.txt or copy at
        -:   18://  http://www.boost.org/LICENSE_1_0.txt)
        -:   19://
        -:   20://  http://www.boost.org/libs/throw_exception
        -:   21://
        -:   22:
        -:   23:#include <boost/exception/exception.hpp>
        -:   24:#include <boost/assert/source_location.hpp>
        -:   25:#include <boost/config.hpp>
        -:   26:#include <boost/config/workaround.hpp>
        -:   27:#include <exception>
        -:   28:
        -:   29:#if !defined( BOOST_EXCEPTION_DISABLE ) && defined( BOOST_BORLANDC ) && BOOST_WORKAROUND( BOOST_BORLANDC, BOOST_TESTED_AT(0x593) )
        -:   30:# define BOOST_EXCEPTION_DISABLE
        -:   31:#endif
        -:   32:
        -:   33:namespace boost
        -:   34:{
        -:   35:
        -:   36:#if defined( BOOST_NO_EXCEPTIONS )
        -:   37:
        -:   38:BOOST_NORETURN void throw_exception( std::exception const & e ); // user defined
        -:   39:BOOST_NORETURN void throw_exception( std::exception const & e, boost::source_location const & loc ); // user defined
        -:   40:
        -:   41:#endif
        -:   42:
        -:   43:// boost::wrapexcept<E>
        -:   44:
        -:   45:namespace detail
        -:   46:{
        -:   47:
        -:   48:typedef char (&wrapexcept_s1)[ 1 ];
        -:   49:typedef char (&wrapexcept_s2)[ 2 ];
        -:   50:
        -:   51:template<class T> wrapexcept_s1 wrapexcept_is_convertible( T* );
        -:   52:template<class T> wrapexcept_s2 wrapexcept_is_convertible( void* );
        -:   53:
        -:   54:template<class E, class B, int I = sizeof( wrapexcept_is_convertible<B>( static_cast< E* >( 0 ) ) ) > struct wrapexcept_add_base;
        -:   55:
        -:   56:template<class E, class B> struct wrapexcept_add_base<E, B, 1>
        -:   57:{
        -:   58:    struct type {};
        -:   59:};
        -:   60:
        -:   61:template<class E, class B> struct wrapexcept_add_base<E, B, 2>
        -:   62:{
        -:   63:    typedef B type;
        -:   64:};
        -:   65:
        -:   66:} // namespace detail
        -:   67:
function _ZN5boost10wrapexceptINS_3mpi9exceptionEEC2ERKS3_ called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_17bad_function_callEEC2ERKS2_ called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_17bad_function_callEED0Ev called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_17bad_function_callEED2Ev called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_3mpi9exceptionEED0Ev called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_3mpi9exceptionEED2Ev called 0 returned 0% blocks executed 0%
    #####:   68:template<class E> struct BOOST_SYMBOL_VISIBLE wrapexcept:
    $$$$$:   68-block  0
    $$$$$:   68-block  1
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:   68-block  2
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:   68-block  3
    %%%%%:   68-block  4
call    7 never executed
    %%%%%:   68-block  5
call    8 never executed
    $$$$$:   68-block  6
    $$$$$:   68-block  7
call    9 never executed
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$:   68-block  8
    %%%%%:   68-block  9
call   14 never executed
    %%%%%:   68-block 10
call   15 never executed
    $$$$$:   68-block 11
    $$$$$:   68-block 12
call   16 never executed
call   17 never executed
    $$$$$:   68-block 13
    $$$$$:   68-block 14
call   18 never executed
call   19 never executed
call   20 never executed
    $$$$$:   68-block 15
    $$$$$:   68-block 16
call   21 never executed
call   22 never executed
    $$$$$:   68-block 17
    $$$$$:   68-block 18
call   23 never executed
call   24 never executed
call   25 never executed
        -:   69:    public detail::wrapexcept_add_base<E, boost::exception_detail::clone_base>::type,
        -:   70:    public E,
        -:   71:    public detail::wrapexcept_add_base<E, boost::exception>::type
        -:   72:{
        -:   73:private:
        -:   74:
        -:   75:    struct deleter
        -:   76:    {
        -:   77:        wrapexcept * p_;
function _ZN5boost10wrapexceptINS_3mpi9exceptionEE7deleterD2Ev called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_17bad_function_callEE7deleterD2Ev called 0 returned 0% blocks executed 0%
    #####:   78:        ~deleter() { delete p_; }
    $$$$$:   78-block  0
    $$$$$:   78-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:   78-block  2
call    2 never executed
    $$$$$:   78-block  3
    $$$$$:   78-block  4
branch  3 never executed
branch  4 never executed
    $$$$$:   78-block  5
call    5 never executed
        -:   79:    };
        -:   80:
        -:   81:private:
        -:   82:
function _ZN5boost10wrapexceptINS_17bad_function_callEE9copy_fromEPKv called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_3mpi9exceptionEE9copy_fromEPKv called 0 returned 0% blocks executed 0%
    #####:   83:    void copy_from( void const* )
    $$$$$:   83-block  0
    $$$$$:   83-block  1
        -:   84:    {
    #####:   85:    }
        -:   86:
        -:   87:    void copy_from( boost::exception const* p )
        -:   88:    {
        -:   89:        static_cast<boost::exception&>( *this ) = *p;
        -:   90:    }
        -:   91:
        -:   92:public:
        -:   93:
function _ZN5boost10wrapexceptINS_17bad_function_callEEC2ERKS1_ called 0 returned 0% blocks executed 0%
function _ZN5boost10wrapexceptINS_3mpi9exceptionEEC2ERKS2_ called 0 returned 0% blocks executed 0%
    #####:   94:    explicit wrapexcept( E const & e ): E( e )
    $$$$$:   94-block  0
    $$$$$:   94-block  1
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   94-block  2
call    5 never executed
    %%%%%:   94-block  3
call    6 never executed
    $$$$$:   94-block  4
    $$$$$:   94-block  5
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:   94-block  6
call   11 never executed
branch 12 never executed
branch 13 never executed
    %%%%%:   94-block  7
call   14 never executed
    %%%%%:   94-block  8
call   15 never executed
        -:   95:    {
    #####:   96:        copy_from( &e );
    $$$$$:   96-block  0
call    0 never executed
    $$$$$:   96-block  1
call    1 never executed
    #####:   97:    }
        -:   98:
        -:   99:    explicit wrapexcept( E const & e, boost::source_location const & loc ): E( e )
        -:  100:    {
        -:  101:        copy_from( &e );
        -:  102:
        -:  103:        set_info( *this, throw_file( loc.file_name() ) );
        -:  104:        set_info( *this, throw_line( loc.line() ) );
        -:  105:        set_info( *this, throw_function( loc.function_name() ) );
        -:  106:    }
        -:  107:
function _ZNK5boost10wrapexceptINS_3mpi9exceptionEE5cloneEv called 0 returned 0% blocks executed 0%
function _ZNK5boost10wrapexceptINS_17bad_function_callEE5cloneEv called 0 returned 0% blocks executed 0%
    #####:  108:    virtual boost::exception_detail::clone_base const * clone() const BOOST_OVERRIDE
    $$$$$:  108-block  0
    $$$$$:  108-block  1
        -:  109:    {
    #####:  110:        wrapexcept * p = new wrapexcept( *this );
    $$$$$:  110-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  110-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  110-block  2
call    6 never executed
    $$$$$:  110-block  3
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  110-block  4
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:  110-block  5
call   13 never executed
    #####:  111:        deleter del = { p };
    $$$$$:  111-block  0
call    0 never executed
    %%%%%:  111-block  1
call    1 never executed
    $$$$$:  111-block  2
call    2 never executed
    %%%%%:  111-block  3
call    3 never executed
        -:  112:
    #####:  113:        boost::exception_detail::copy_boost_exception( p, this );
    $$$$$:  113-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  113-block  1
    $$$$$:  113-block  2
    $$$$$:  113-block  3
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  113-block  4
branch  5 never executed
branch  6 never executed
    $$$$$:  113-block  5
    $$$$$:  113-block  6
    $$$$$:  113-block  7
call    7 never executed
branch  8 never executed
branch  9 never executed
        -:  114:
    #####:  115:        del.p_ = 0;
    #####:  116:        return p;
    $$$$$:  116-block  0
    $$$$$:  116-block  1
        -:  117:    }
        -:  118:
function _ZNK5boost10wrapexceptINS_3mpi9exceptionEE7rethrowEv called 0 returned 0% blocks executed 0%
function _ZNK5boost10wrapexceptINS_17bad_function_callEE7rethrowEv called 0 returned 0% blocks executed 0%
    #####:  119:    virtual void rethrow() const BOOST_OVERRIDE
    %%%%%:  119-block  0
    %%%%%:  119-block  1
        -:  120:    {
        -:  121:#if defined( BOOST_NO_EXCEPTIONS )
        -:  122:
        -:  123:        boost::throw_exception( *this );
        -:  124:
        -:  125:#else
        -:  126:
    #####:  127:        throw *this;
    $$$$$:  127-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  127-block  1
call    4 never executed
    %%%%%:  127-block  2
call    5 never executed
    $$$$$:  127-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  127-block  4
call   10 never executed
    %%%%%:  127-block  5
call   11 never executed
        -:  128:
        -:  129:#endif
        -:  130:    }
        -:  131:};
        -:  132:
        -:  133:// All boost exceptions are required to derive from std::exception,
        -:  134:// to ensure compatibility with BOOST_NO_EXCEPTIONS.
        -:  135:
function _ZN5boost36throw_exception_assert_compatibilityERKSt9exception called 0 returned 0% blocks executed 0%
    #####:  136:inline void throw_exception_assert_compatibility( std::exception const & ) {}
    $$$$$:  136-block  0
        -:  137:
        -:  138:// boost::throw_exception
        -:  139:
        -:  140:#if !defined( BOOST_NO_EXCEPTIONS )
        -:  141:
        -:  142:#if defined( BOOST_EXCEPTION_DISABLE )
        -:  143:
        -:  144:template<class E> BOOST_NORETURN void throw_exception( E const & e )
        -:  145:{
        -:  146:    throw_exception_assert_compatibility( e );
        -:  147:    throw e;
        -:  148:}
        -:  149:
        -:  150:template<class E> BOOST_NORETURN void throw_exception( E const & e, boost::source_location const & )
        -:  151:{
        -:  152:    throw_exception_assert_compatibility( e );
        -:  153:    throw e;
        -:  154:}
        -:  155:
        -:  156:#else // defined( BOOST_EXCEPTION_DISABLE )
        -:  157:
function _ZN5boost15throw_exceptionINS_17bad_function_callEEEvRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost15throw_exceptionINS_3mpi9exceptionEEEvRKT_ called 0 returned 0% blocks executed 0%
    #####:  158:template<class E> BOOST_NORETURN void throw_exception( E const & e )
    %%%%%:  158-block  0
    %%%%%:  158-block  1
        -:  159:{
    #####:  160:    throw_exception_assert_compatibility( e );
    $$$$$:  160-block  0
call    0 never executed
    $$$$$:  160-block  1
call    1 never executed
    #####:  161:    throw wrapexcept<E>( e );
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  161-block  0
call    4 never executed
    %%%%%:  161-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  161-block  2
call   10 never executed
    %%%%%:  161-block  3
call   11 never executed
        -:  162:}
        -:  163:
        -:  164:template<class E> BOOST_NORETURN void throw_exception( E const & e, boost::source_location const & loc )
        -:  165:{
        -:  166:    throw_exception_assert_compatibility( e );
        -:  167:    throw wrapexcept<E>( e, loc );
        -:  168:}
        -:  169:
        -:  170:#endif // defined( BOOST_EXCEPTION_DISABLE )
        -:  171:
        -:  172:#endif // !defined( BOOST_NO_EXCEPTIONS )
        -:  173:
        -:  174:} // namespace boost
        -:  175:
        -:  176:// BOOST_THROW_EXCEPTION
        -:  177:
        -:  178:#define BOOST_THROW_EXCEPTION(x) ::boost::throw_exception(x, BOOST_CURRENT_LOCATION)
        -:  179:
        -:  180:#endif // #ifndef BOOST_THROW_EXCEPTION_HPP_INCLUDED
