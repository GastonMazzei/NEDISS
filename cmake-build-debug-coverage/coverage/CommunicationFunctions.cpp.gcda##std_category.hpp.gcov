        -:    0:Source:/usr/include/boost/system/detail/std_category.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Communication/CommunicationFunctions.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Communication/CommunicationFunctions.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef BOOST_SYSTEM_DETAIL_STD_CATEGORY_HPP_INCLUDED
        -:    2:#define BOOST_SYSTEM_DETAIL_STD_CATEGORY_HPP_INCLUDED
        -:    3:
        -:    4:// Support for interoperability between Boost.System and <system_error>
        -:    5://
        -:    6:// Copyright 2018, 2021 Peter Dimov
        -:    7://
        -:    8:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10://
        -:   11:// See library home page at http://www.boost.org/libs/system
        -:   12:
        -:   13:#include <boost/system/detail/error_category.hpp>
        -:   14:#include <boost/system/detail/error_condition.hpp>
        -:   15:#include <boost/system/detail/error_code.hpp>
        -:   16:#include <boost/system/detail/generic_category.hpp>
        -:   17:#include <system_error>
        -:   18:
        -:   19://
        -:   20:
        -:   21:namespace boost
        -:   22:{
        -:   23:
        -:   24:namespace system
        -:   25:{
        -:   26:
        -:   27:namespace detail
        -:   28:{
        -:   29:
function _ZN5boost6system6detail12std_categoryD0Ev called 0 returned 0% blocks executed 0%
function _ZN5boost6system6detail12std_categoryD2Ev called 0 returned 0% blocks executed 0%
    #####:   30:class BOOST_SYMBOL_VISIBLE std_category: public std::error_category
    $$$$$:   30-block  0
    $$$$$:   30-block  1
call    0 never executed
call    1 never executed
    $$$$$:   30-block  2
    $$$$$:   30-block  3
call    2 never executed
        -:   31:{
        -:   32:private:
        -:   33:
        -:   34:    boost::system::error_category const * pc_;
        -:   35:
        -:   36:public:
        -:   37:
function _ZN5boost6system6detail12std_categoryC2EPKNS0_14error_categoryEj called 0 returned 0% blocks executed 0%
    #####:   38:    explicit std_category( boost::system::error_category const * pc, unsigned id ): pc_( pc )
    $$$$$:   38-block  0
    $$$$$:   38-block  1
call    0 never executed
        -:   39:    {
        -:   40:        if( id != 0 )
        -:   41:        {
        -:   42:#if defined(_MSC_VER) && defined(_CPPLIB_VER) && _MSC_VER >= 1900 && _MSC_VER < 2000
        -:   43:
        -:   44:            // Poking into the protected _Addr member of std::error_category
        -:   45:            // is not a particularly good programming practice, but what can
        -:   46:            // you do
        -:   47:
        -:   48:            _Addr = id;
        -:   49:
        -:   50:#endif
        -:   51:        }
    #####:   52:    }
        -:   53:
function _ZNK5boost6system6detail12std_category4nameEv called 0 returned 0% blocks executed 0%
    #####:   54:    const char * name() const BOOST_NOEXCEPT BOOST_OVERRIDE
    $$$$$:   54-block  0
        -:   55:    {
    #####:   56:        return pc_->name();
    $$$$$:   56-block  0
call    0 never executed
        -:   57:    }
        -:   58:
function _ZNK5boost6system6detail12std_category7messageB5cxx11Ei called 0 returned 0% blocks executed 0%
    #####:   59:    std::string message( int ev ) const BOOST_OVERRIDE
    $$$$$:   59-block  0
        -:   60:    {
    #####:   61:        return pc_->message( ev );
    $$$$$:   61-block  0
call    0 never executed
        -:   62:    }
        -:   63:
function _ZNK5boost6system6detail12std_category23default_error_conditionEi called 0 returned 0% blocks executed 0%
    #####:   64:    std::error_condition default_error_condition( int ev ) const BOOST_NOEXCEPT BOOST_OVERRIDE
    $$$$$:   64-block  0
        -:   65:    {
    #####:   66:        return pc_->default_error_condition( ev );
    $$$$$:   66-block  0
call    0 never executed
call    1 never executed
        -:   67:    }
        -:   68:
        -:   69:    bool equivalent( int code, const std::error_condition & condition ) const BOOST_NOEXCEPT BOOST_OVERRIDE;
        -:   70:    bool equivalent( const std::error_code & code, int condition ) const BOOST_NOEXCEPT BOOST_OVERRIDE;
        -:   71:};
        -:   72:
function _ZNK5boost6system6detail12std_category10equivalentEiRKSt15error_condition called 0 returned 0% blocks executed 0%
    #####:   73:inline bool std_category::equivalent( int code, const std::error_condition & condition ) const BOOST_NOEXCEPT
    $$$$$:   73-block  0
        -:   74:{
    #####:   75:    if( condition.category() == *this )
    $$$$$:   75-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   76:    {
    #####:   77:        boost::system::error_condition bn( condition.value(), *pc_ );
    $$$$$:   77-block  0
call    0 never executed
call    1 never executed
    #####:   78:        return pc_->equivalent( code, bn );
call    0 never executed
        -:   79:    }
    #####:   80:    else if( condition.category() == std::generic_category() || condition.category() == boost::system::generic_category() )
    $$$$$:   80-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:   80-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:   80-block  2
    $$$$$:   80-block  3
    $$$$$:   80-block  4
branch 10 never executed
branch 11 never executed
        -:   81:    {
    #####:   82:        boost::system::error_condition bn( condition.value(), boost::system::generic_category() );
    $$$$$:   82-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   83:        return pc_->equivalent( code, bn );
call    0 never executed
        -:   84:    }
        -:   85:
        -:   86:#ifndef BOOST_NO_RTTI
        -:   87:
    #####:   88:    else if( std_category const* pc2 = dynamic_cast< std_category const* >( &condition.category() ) )
    $$$$$:   88-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:   88-block  1
    $$$$$:   88-block  2
    $$$$$:   88-block  3
branch  3 never executed
branch  4 never executed
        -:   89:    {
    #####:   90:        boost::system::error_condition bn( condition.value(), *pc2->pc_ );
    $$$$$:   90-block  0
call    0 never executed
call    1 never executed
    #####:   91:        return pc_->equivalent( code, bn );
call    0 never executed
        -:   92:    }
        -:   93:
        -:   94:#endif
        -:   95:
        -:   96:    else
        -:   97:    {
    #####:   98:        return default_error_condition( code ) == condition;
    $$$$$:   98-block  0
call    0 never executed
call    1 never executed
        -:   99:    }
        -:  100:}
        -:  101:
function _ZNK5boost6system6detail12std_category10equivalentERKSt10error_codei called 0 returned 0% blocks executed 0%
    #####:  102:inline bool std_category::equivalent( const std::error_code & code, int condition ) const BOOST_NOEXCEPT
    $$$$$:  102-block  0
        -:  103:{
    #####:  104:    if( code.category() == *this )
    $$$$$:  104-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  105:    {
    #####:  106:        boost::system::error_code bc( code.value(), *pc_ );
    $$$$$:  106-block  0
call    0 never executed
call    1 never executed
    #####:  107:        return pc_->equivalent( bc, condition );
call    0 never executed
        -:  108:    }
    #####:  109:    else if( code.category() == std::generic_category() || code.category() == boost::system::generic_category() )
    $$$$$:  109-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  109-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  109-block  2
    $$$$$:  109-block  3
    $$$$$:  109-block  4
branch 10 never executed
branch 11 never executed
        -:  110:    {
    #####:  111:        boost::system::error_code bc( code.value(), boost::system::generic_category() );
    $$$$$:  111-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  112:        return pc_->equivalent( bc, condition );
call    0 never executed
        -:  113:    }
        -:  114:
        -:  115:#ifndef BOOST_NO_RTTI
        -:  116:
    #####:  117:    else if( std_category const* pc2 = dynamic_cast< std_category const* >( &code.category() ) )
    $$$$$:  117-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  117-block  1
    $$$$$:  117-block  2
    $$$$$:  117-block  3
branch  3 never executed
branch  4 never executed
        -:  118:    {
    #####:  119:        boost::system::error_code bc( code.value(), *pc2->pc_ );
    $$$$$:  119-block  0
call    0 never executed
call    1 never executed
    #####:  120:        return pc_->equivalent( bc, condition );
call    0 never executed
        -:  121:    }
        -:  122:
        -:  123:#endif
        -:  124:
    #####:  125:    else if( *pc_ == boost::system::generic_category() )
    $$$$$:  125-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  126:    {
    #####:  127:        return std::generic_category().equivalent( code, condition );
    $$$$$:  127-block  0
call    0 never executed
        -:  128:    }
        -:  129:    else
        -:  130:    {
    #####:  131:        return false;
    $$$$$:  131-block  0
        -:  132:    }
        -:  133:}
        -:  134:
        -:  135:} // namespace detail
        -:  136:
        -:  137:} // namespace system
        -:  138:
        -:  139:} // namespace boost
        -:  140:
        -:  141:#endif // #ifndef BOOST_SYSTEM_DETAIL_STD_CATEGORY_HPP_INCLUDED
