        -:    0:Source:/usr/include/boost/graph/distributed/detail/mpi_process_group.ipp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/main.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2004-2008 The Trustees of Indiana University.
        -:    4:// Copyright (C) 2007  Douglas Gregor <doug.gregor@gmail.com>
        -:    5:// Copyright (C) 2007  Matthias Troyer  <troyer@boost-consulting.com>
        -:    6:
        -:    7:// Use, modification and distribution is subject to the Boost Software
        -:    8:// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    9:// http://www.boost.org/LICENSE_1_0.txt)
        -:   10:
        -:   11://  Authors: Douglas Gregor
        -:   12://           Andrew Lumsdaine
        -:   13://           Matthias Troyer
        -:   14:
        -:   15://#define PBGL_PROCESS_GROUP_DEBUG
        -:   16:
        -:   17:#ifndef BOOST_GRAPH_USE_MPI
        -:   18:#error "Parallel BGL files should not be included unless <boost/graph/use_mpi.hpp> has been included"
        -:   19:#endif
        -:   20:
        -:   21:#include <boost/assert.hpp>
        -:   22:#include <algorithm>
        -:   23:#include <boost/graph/parallel/detail/untracked_pair.hpp>
        -:   24:#include <numeric>
        -:   25:#include <iterator>
        -:   26:#include <functional>
        -:   27:#include <vector>
        -:   28:#include <queue>
        -:   29:#include <stack>
        -:   30:#include <list>
        -:   31:#include <boost/graph/distributed/detail/tag_allocator.hpp>
        -:   32:#include <stdio.h>
        -:   33:
        -:   34:// #define PBGL_PROCESS_GROUP_DEBUG
        -:   35:
        -:   36:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:   37:#  include <iostream>
        -:   38:#endif
        -:   39:
        -:   40:namespace boost { namespace graph { namespace distributed {
        -:   41:
        -:   42:struct mpi_process_group::impl
        -:   43:{
        -:   44:  
        -:   45:  typedef mpi_process_group::message_header message_header;
        -:   46:  typedef mpi_process_group::outgoing_messages outgoing_messages;
        -:   47:
        -:   48:  /**
        -:   49:   * Stores the incoming messages from a particular processor.
        -:   50:   *
        -:   51:   * @todo Evaluate whether we should use a deque instance, which
        -:   52:   * would reduce could reduce the cost of "receiving" messages and
        -:   53:     allow us to deallocate memory earlier, but increases the time
        -:   54:     spent in the synchronization step.
        -:   55:   */
        -:   56:  struct incoming_messages {
        -:   57:    incoming_messages();
        -:   58:    ~incoming_messages() {}
        -:   59:
        -:   60:    std::vector<message_header> headers;
        -:   61:    buffer_type                 buffer;
        -:   62:    std::vector<std::vector<message_header>::iterator> next_header;
        -:   63:  };
        -:   64:
        -:   65:  struct batch_request {
        -:   66:    MPI_Request request;
        -:   67:    buffer_type buffer;
        -:   68:  };
        -:   69:
        -:   70:  // send once we have a certain number of messages or bytes in the buffer
        -:   71:  // these numbers need to be tuned, we keep them small at first for testing
        -:   72:  std::size_t batch_header_number;
        -:   73:  std::size_t batch_buffer_size;
        -:   74:  std::size_t batch_message_size;
        -:   75:  
        -:   76:  /**
        -:   77:   * The actual MPI communicator used to transmit data.
        -:   78:   */
        -:   79:  boost::mpi::communicator             comm;
        -:   80:
        -:   81:  /**
        -:   82:   * The MPI communicator used to transmit out-of-band replies.
        -:   83:   */
        -:   84:  boost::mpi::communicator             oob_reply_comm;
        -:   85:
        -:   86:  /// Outgoing message information, indexed by destination processor.
        -:   87:  std::vector<outgoing_messages> outgoing;
        -:   88:
        -:   89:  /// Incoming message information, indexed by source processor.
        -:   90:  std::vector<incoming_messages> incoming;
        -:   91:
        -:   92:  /// The numbers of processors that have entered a synchronization stage
        -:   93:  std::vector<int> processors_synchronizing_stage;
        -:   94:  
        -:   95:  /// The synchronization stage of a processor
        -:   96:  std::vector<int> synchronizing_stage;
        -:   97:
        -:   98:  /// Number of processors still sending messages
        -:   99:  std::vector<int> synchronizing_unfinished;
        -:  100:  
        -:  101:  /// Number of batches sent since last synchronization stage
        -:  102:  std::vector<int> number_sent_batches;
        -:  103:  
        -:  104:  /// Number of batches received minus number of expected batches
        -:  105:  std::vector<int> number_received_batches;
        -:  106:  
        -:  107:
        -:  108:  /// The context of the currently-executing trigger, or @c trc_none
        -:  109:  /// if no trigger is executing.
        -:  110:  trigger_receive_context trigger_context;
        -:  111:
        -:  112:  /// Non-zero indicates that we're processing batches
        -:  113:  /// Increment this when processing patches,
        -:  114:  /// decrement it when you're done.
        -:  115:  int processing_batches;
        -:  116:
        -:  117:  /**
        -:  118:   * Contains all of the active blocks corresponding to attached
        -:  119:   * distributed data structures.
        -:  120:   */
        -:  121:  blocks_type blocks;
        -:  122:
        -:  123:  /// Whether we are currently synchronizing
        -:  124:  bool synchronizing;
        -:  125:
        -:  126:  /// The MPI requests for posted sends of oob messages
        -:  127:  std::vector<MPI_Request> requests;
        -:  128:  
        -:  129:  /// The MPI buffers for posted irecvs of oob messages
        -:  130:  std::map<int,buffer_type> buffers;
        -:  131:
        -:  132:  /// Queue for message batches received while already processing messages
        -:  133:  std::queue<std::pair<int,outgoing_messages> > new_batches;
        -:  134:  /// Maximum encountered size of the new_batches queue
        -:  135:  std::size_t max_received;
        -:  136:
        -:  137:  /// The MPI requests and buffers for batchess being sent
        -:  138:  std::list<batch_request> sent_batches;
        -:  139:  /// Maximum encountered size of the sent_batches list
        -:  140:  std::size_t max_sent;
        -:  141:
        -:  142:  /// Pre-allocated requests in a pool
        -:  143:  std::vector<batch_request> batch_pool;
        -:  144:  /// A stack controlling which batches are available
        -:  145:  std::stack<std::size_t> free_batches;
        -:  146:
        -:  147:  void free_sent_batches();
        -:  148:  
        -:  149:  // Tag allocator
        -:  150:  detail::tag_allocator allocated_tags;
        -:  151:
        -:  152:  impl(std::size_t num_headers, std::size_t buffers_size,
        -:  153:       communicator_type parent_comm);
        -:  154:  ~impl();
        -:  155:  
        -:  156:private:
        -:  157:  void set_batch_size(std::size_t header_num, std::size_t buffer_sz);
        -:  158:};
        -:  159:
function _ZNK5boost5graph11distributed17mpi_process_group15trigger_contextEv called 0 returned 0% blocks executed 0%
    #####:  160:inline trigger_receive_context mpi_process_group::trigger_context() const
    $$$$$:  160-block  0
        -:  161:{
    #####:  162:  return impl_->trigger_context;
    $$$$$:  162-block  0
call    0 never executed
        -:  163:}
        -:  164:
        -:  165:template<typename T>
        -:  166:void
function _ZNK5boost5graph11distributed17mpi_process_group9send_implINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEEEEviiRKT_N4mpl_5bool_ILb1EEE called 0 returned 0% blocks executed 0%
    #####:  167:mpi_process_group::send_impl(int dest, int tag, const T& value,
    $$$$$:  167-block  0
        -:  168:                             mpl::true_ /*is_mpi_datatype*/) const
        -:  169:{
    #####:  170:  BOOST_ASSERT(tag <  msg_reserved_first || tag > msg_reserved_last);
    $$$$$:  170-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  170-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  170-block  2
call    4 never executed
        -:  171:
    #####:  172:  impl::outgoing_messages& outgoing = impl_->outgoing[dest];
    $$$$$:  172-block  0
call    0 never executed
call    1 never executed
        -:  173:
        -:  174:  // Start constructing the message header
        -:  175:  impl::message_header header;
    #####:  176:  header.source = process_id(*this);
call    0 never executed
    #####:  177:  header.tag = tag;
    #####:  178:  header.offset = outgoing.buffer.size();
call    0 never executed
        -:  179:  
    #####:  180:  boost::mpi::packed_oarchive oa(impl_->comm, outgoing.buffer);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  180-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  180-block  1
call    7 never executed
    %%%%%:  180-block  2
    %%%%%:  180-block  3
call    8 never executed
    #####:  181:  oa << value;
    $$$$$:  181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  182:
        -:  183:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  184:  std::cerr << "SEND: " << process_id(*this) << " -> " << dest << ", tag = "
        -:  185:            << tag << ", bytes = " << packed_size << std::endl;
        -:  186:#endif
        -:  187:
        -:  188:  // Store the header
    #####:  189:  header.bytes = outgoing.buffer.size() - header.offset;
    $$$$$:  189-block  0
call    0 never executed
    #####:  190:  outgoing.headers.push_back(header);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  191:
    #####:  192:  maybe_send_batch(dest);
    $$$$$:  192-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  193:}
    %%%%%:  193-block  0
        -:  194:
        -:  195:
        -:  196:template<typename T>
        -:  197:void
function _ZNK5boost5graph11distributed17mpi_process_group9send_implINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS4_14edge_desc_implINS_12directed_tagEmEEEEEEviiRKT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group9send_implINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEEEEviiRKT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
    #####:  198:mpi_process_group::send_impl(int dest, int tag, const T& value,
    $$$$$:  198-block  0
    $$$$$:  198-block  1
        -:  199:                             mpl::false_ /*is_mpi_datatype*/) const
        -:  200:{
    #####:  201:  BOOST_ASSERT(tag <  msg_reserved_first || tag > msg_reserved_last);
    $$$$$:  201-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  201-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  201-block  2
call    4 never executed
    $$$$$:  201-block  3
branch  5 never executed
branch  6 never executed
    $$$$$:  201-block  4
branch  7 never executed
branch  8 never executed
    $$$$$:  201-block  5
call    9 never executed
        -:  202:
    #####:  203:  impl::outgoing_messages& outgoing = impl_->outgoing[dest];
    $$$$$:  203-block  0
call    0 never executed
call    1 never executed
    $$$$$:  203-block  1
call    2 never executed
call    3 never executed
        -:  204:
        -:  205:  // Start constructing the message header
        -:  206:  impl::message_header header;
    #####:  207:  header.source = process_id(*this);
call    0 never executed
call    1 never executed
    #####:  208:  header.tag = tag;
    #####:  209:  header.offset = outgoing.buffer.size();
call    0 never executed
call    1 never executed
        -:  210:
        -:  211:  // Serialize into the buffer
    #####:  212:  boost::mpi::packed_oarchive out(impl_->comm, outgoing.buffer);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  212-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  212-block  1
call    7 never executed
    %%%%%:  212-block  2
    %%%%%:  212-block  3
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  212-block  4
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  212-block  5
call   16 never executed
    %%%%%:  212-block  6
    %%%%%:  212-block  7
call   17 never executed
    #####:  213:  out << value;
    $$$$$:  213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  213-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  214:
        -:  215:  // Store the header
    #####:  216:  header.bytes = outgoing.buffer.size() - header.offset;
    $$$$$:  216-block  0
call    0 never executed
    $$$$$:  216-block  1
call    1 never executed
    #####:  217:  outgoing.headers.push_back(header);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  218:  maybe_send_batch(dest);
    $$$$$:  218-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  218-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  219:
        -:  220:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  221:  std::cerr << "SEND: " << process_id(*this) << " -> " << dest << ", tag = "
        -:  222:            << tag << ", bytes = " << header.bytes << std::endl;
        -:  223:#endif
    #####:  224:}
    %%%%%:  224-block  0
    %%%%%:  224-block  1
        -:  225:
        -:  226:template<typename T>
        -:  227:inline void
function _ZN5boost5graph11distributed4sendINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS3_14edge_desc_implINS_12directed_tagEmEEEEEEvRKNS1_17mpi_process_groupEiiRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed4sendINS_6detail8parallel31msg_add_edge_with_property_dataINS4_17global_descriptorImEEm11DynamicEdgeEEEEvRKNS1_17mpi_process_groupEiiRKT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed4sendINS_6detail8parallel17msg_add_edge_dataINS4_17global_descriptorImEEmEEEEvRKNS1_17mpi_process_groupEiiRKT_ called 0 returned 0% blocks executed 0%
    #####:  228:send(const mpi_process_group& pg, mpi_process_group::process_id_type dest,
    $$$$$:  228-block  0
    $$$$$:  228-block  1
    $$$$$:  228-block  2
        -:  229:     int tag, const T& value)
        -:  230:{
    #####:  231:  pg.send_impl(dest, pg.encode_tag(pg.my_block_number(), tag), value,
    $$$$$:  231-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  231-block  1
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  231-block  2
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
        -:  232:               boost::mpi::is_mpi_datatype<T>());
    #####:  233:}
    $$$$$:  233-block  0
    $$$$$:  233-block  1
    $$$$$:  233-block  2
        -:  234:
        -:  235:template<typename T>
        -:  236:typename enable_if<boost::mpi::is_mpi_datatype<T>, void>::type
        -:  237:send(const mpi_process_group& pg, mpi_process_group::process_id_type dest,
        -:  238:     int tag, const T values[], std::size_t n)
        -:  239:{
        -:  240:  pg.send_impl(dest, pg.encode_tag(pg.my_block_number(), tag),
        -:  241:                 boost::serialization::make_array(values,n), 
        -:  242:                 boost::mpl::true_());
        -:  243:}
        -:  244:
        -:  245:template<typename T>
        -:  246:typename disable_if<boost::mpi::is_mpi_datatype<T>, void>::type
        -:  247:mpi_process_group::
        -:  248:array_send_impl(int dest, int tag, const T values[], std::size_t n) const
        -:  249:{
        -:  250:  BOOST_ASSERT(tag <  msg_reserved_first || tag > msg_reserved_last);
        -:  251:
        -:  252:  impl::outgoing_messages& outgoing = impl_->outgoing[dest];
        -:  253:
        -:  254:  // Start constructing the message header
        -:  255:  impl::message_header header;
        -:  256:  header.source = process_id(*this);
        -:  257:  header.tag = tag;
        -:  258:  header.offset = outgoing.buffer.size();
        -:  259:
        -:  260:  // Serialize into the buffer
        -:  261:  boost::mpi::packed_oarchive out(impl_->comm, outgoing.buffer);
        -:  262:  out << n;
        -:  263:
        -:  264:  for (std::size_t i = 0; i < n; ++i)
        -:  265:    out << values[i];
        -:  266:
        -:  267:  // Store the header
        -:  268:  header.bytes = outgoing.buffer.size() - header.offset;
        -:  269:  outgoing.headers.push_back(header);
        -:  270:  maybe_send_batch(dest);
        -:  271:
        -:  272:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  273:  std::cerr << "SEND: " << process_id(*this) << " -> " << dest << ", tag = "
        -:  274:            << tag << ", bytes = " << header.bytes << std::endl;
        -:  275:#endif
        -:  276:}
        -:  277:
        -:  278:template<typename T>
        -:  279:typename disable_if<boost::mpi::is_mpi_datatype<T>, void>::type
        -:  280:send(const mpi_process_group& pg, mpi_process_group::process_id_type dest,
        -:  281:     int tag, const T values[], std::size_t n)
        -:  282:{
        -:  283:  pg.array_send_impl(dest, pg.encode_tag(pg.my_block_number(), tag), 
        -:  284:                     values, n);
        -:  285:}
        -:  286:
        -:  287:template<typename InputIterator>
        -:  288:void
        -:  289:send(const mpi_process_group& pg, mpi_process_group::process_id_type dest,
        -:  290:     int tag, InputIterator first, InputIterator last)
        -:  291:{
        -:  292:  typedef typename std::iterator_traits<InputIterator>::value_type value_type;
        -:  293:  std::vector<value_type> values(first, last);
        -:  294:  if (values.empty()) send(pg, dest, tag, static_cast<value_type*>(0), 0);
        -:  295:  else send(pg, dest, tag, &values[0], values.size());
        -:  296:}
        -:  297:
        -:  298:template<typename T>
        -:  299:bool
function _ZNK5boost5graph11distributed17mpi_process_group12receive_implINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEEEEbiiRT_N4mpl_5bool_ILb1EEE called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group12receive_implINS_6detail8parallel20msg_remove_edge_dataINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEEEEEbiiRT_N4mpl_5bool_ILb1EEE called 0 returned 0% blocks executed 0%
    #####:  300:mpi_process_group::receive_impl(int source, int tag, T& value,
    $$$$$:  300-block  0
    $$$$$:  300-block  1
        -:  301:                                mpl::true_ /*is_mpi_datatype*/) const
        -:  302:{
        -:  303:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  304:  std::cerr << "RECV: " << process_id(*this) << " <- " << source << ", tag = "
        -:  305:            << tag << std::endl;
        -:  306:#endif
        -:  307:
    #####:  308:  impl::incoming_messages& incoming = impl_->incoming[source];
    $$$$$:  308-block  0
call    0 never executed
call    1 never executed
    $$$$$:  308-block  1
call    2 never executed
call    3 never executed
        -:  309:
        -:  310:  // Find the next header with the right tag
    #####:  311:  std::vector<impl::message_header>::iterator header =
call    0 never executed
call    1 never executed
    #####:  312:    incoming.next_header[my_block_number()];
call    0 never executed
call    1 never executed
    #####:  313:  while (header != incoming.headers.end() && header->tag != tag) ++header;
    $$$$$:  313-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  313-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  313-block  2
    $$$$$:  313-block  3
    $$$$$:  313-block  4
branch  7 never executed
branch  8 never executed
    $$$$$:  313-block  5
call    9 never executed
    $$$$$:  313-block  6
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$:  313-block  7
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$:  313-block  8
    $$$$$:  313-block  9
    $$$$$:  313-block 10
branch 17 never executed
branch 18 never executed
    $$$$$:  313-block 11
call   19 never executed
        -:  314:
        -:  315:  // If no header is found, notify the caller
    #####:  316:  if (header == incoming.headers.end()) return false;
    $$$$$:  316-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  316-block  1
    $$$$$:  316-block  2
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  316-block  3
        -:  317:
        -:  318:  // Unpack the data
    #####:  319:  if (header->bytes > 0) {
    $$$$$:  319-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  319-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  320:    boost::mpi::packed_iarchive ia(impl_->comm, incoming.buffer, 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  320-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  320-block  1
call    7 never executed
    %%%%%:  320-block  2
    %%%%%:  320-block  3
call    8 never executed
    %%%%%:  320-block  4
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  320-block  5
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  320-block  6
call   16 never executed
    %%%%%:  320-block  7
    %%%%%:  320-block  8
call   17 never executed
    %%%%%:  320-block  9
    #####:  321:                                   archive::no_header, header->offset);
    $$$$$:  321-block  0
call    0 never executed
    $$$$$:  321-block  1
call    1 never executed
    #####:  322:    ia >> value;
    $$$$$:  322-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  322-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  323:  }
        -:  324:
        -:  325:  // Mark this message as received
    #####:  326:  header->tag = -1;
    $$$$$:  326-block  0
call    0 never executed
    $$$$$:  326-block  1
call    1 never executed
        -:  327:
        -:  328:  // Move the "next header" indicator to the next unreceived message
    #####:  329:  while (incoming.next_header[my_block_number()] != incoming.headers.end()
    $$$$$:  329-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  329-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    #####:  330:         && incoming.next_header[my_block_number()]->tag == -1)
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  330-block  1
    $$$$$:  330-block  2
    $$$$$:  330-block  3
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:  330-block  4
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  330-block  5
    $$$$$:  330-block  6
    $$$$$:  330-block  7
branch 16 never executed
branch 17 never executed
    #####:  331:    ++incoming.next_header[my_block_number()];
    $$$$$:  331-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:  331-block  1
call    3 never executed
call    4 never executed
call    5 never executed
        -:  332:
    #####:  333:  if (incoming.next_header[my_block_number()] == incoming.headers.end()) {
    $$$$$:  333-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  333-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:  334:    bool finished = true;
    #####:  335:    for (std::size_t i = 0; i < incoming.next_header.size() && finished; ++i) {
    $$$$$:  335-block  0
    $$$$$:  335-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  335-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:  335-block  3
    $$$$$:  335-block  4
    $$$$$:  335-block  5
branch  5 never executed
branch  6 never executed
    $$$$$:  335-block  6
    $$$$$:  335-block  7
    $$$$$:  335-block  8
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  335-block  9
branch 10 never executed
branch 11 never executed
    $$$$$:  335-block 10
    $$$$$:  335-block 11
    $$$$$:  335-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:  335-block 13
    #####:  336:      if (incoming.next_header[i] != incoming.headers.end()) finished = false;
    $$$$$:  336-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  336-block  1
    $$$$$:  336-block  2
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  336-block  3
        -:  337:    }
        -:  338:
    #####:  339:    if (finished) {
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
branch  2 never executed
branch  3 never executed
    #####:  340:      std::vector<impl::message_header> no_headers;
    $$$$$:  340-block  0
call    0 never executed
call    1 never executed
    $$$$$:  340-block  1
    $$$$$:  340-block  2
call    2 never executed
call    3 never executed
    $$$$$:  340-block  3
    #####:  341:      incoming.headers.swap(no_headers);
call    0 never executed
call    1 never executed
    #####:  342:      buffer_type empty_buffer;
call    0 never executed
    $$$$$:  342-block  0
call    1 never executed
call    2 never executed
    $$$$$:  342-block  1
call    3 never executed
    #####:  343:      incoming.buffer.swap(empty_buffer);
call    0 never executed
call    1 never executed
    #####:  344:      for (std::size_t i = 0; i < incoming.next_header.size(); ++i)
    $$$$$:  344-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  344-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  345:        incoming.next_header[i] = incoming.headers.end();
    $$$$$:  345-block  0
call    0 never executed
call    1 never executed
    $$$$$:  345-block  1
call    2 never executed
call    3 never executed
        -:  346:    }
        -:  347:  }
        -:  348:
    #####:  349:  return true;
    $$$$$:  349-block  0
    $$$$$:  349-block  1
    $$$$$:  349-block  2
    %%%%%:  349-block  3
    $$$$$:  349-block  4
    $$$$$:  349-block  5
    $$$$$:  349-block  6
    %%%%%:  349-block  7
        -:  350:}
        -:  351:
        -:  352:template<typename T>
        -:  353:bool
function _ZNK5boost5graph11distributed17mpi_process_group12receive_implI11DynamicNodeEEbiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group12receive_implINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEEEEbiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group12receive_implINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS4_14edge_desc_implINS_12directed_tagEmEEEEEEbiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
    #####:  354:mpi_process_group::receive_impl(int source, int tag, T& value,
    $$$$$:  354-block  0
    $$$$$:  354-block  1
    $$$$$:  354-block  2
        -:  355:                                mpl::false_ /*is_mpi_datatype*/) const
        -:  356:{
    #####:  357:  impl::incoming_messages& incoming = impl_->incoming[source];
    $$$$$:  357-block  0
call    0 never executed
call    1 never executed
    $$$$$:  357-block  1
call    2 never executed
call    3 never executed
    $$$$$:  357-block  2
call    4 never executed
call    5 never executed
        -:  358:
        -:  359:  // Find the next header with the right tag
    #####:  360:  std::vector<impl::message_header>::iterator header =
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  361:    incoming.next_header[my_block_number()];
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  362:  while (header != incoming.headers.end() && header->tag != tag) ++header;
    $$$$$:  362-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  362-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  362-block  2
    $$$$$:  362-block  3
    $$$$$:  362-block  4
branch  7 never executed
branch  8 never executed
    $$$$$:  362-block  5
call    9 never executed
    $$$$$:  362-block  6
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$:  362-block  7
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$:  362-block  8
    $$$$$:  362-block  9
    $$$$$:  362-block 10
branch 17 never executed
branch 18 never executed
    $$$$$:  362-block 11
call   19 never executed
    $$$$$:  362-block 12
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$:  362-block 13
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$:  362-block 14
    $$$$$:  362-block 15
    $$$$$:  362-block 16
branch 27 never executed
branch 28 never executed
    $$$$$:  362-block 17
call   29 never executed
        -:  363:
        -:  364:  // If no header is found, notify the caller
    #####:  365:  if (header == incoming.headers.end()) return false;
    $$$$$:  365-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  365-block  1
    $$$$$:  365-block  2
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  365-block  3
    $$$$$:  365-block  4
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  365-block  5
        -:  366:
        -:  367:  // Deserialize the data
    #####:  368:  boost::mpi::packed_iarchive in(impl_->comm, incoming.buffer, 
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  368-block  0
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  368-block  1
call    7 never executed
    $$$$$:  368-block  2
    $$$$$:  368-block  3
    %%%%%:  368-block  4
    %%%%%:  368-block  5
    %%%%%:  368-block  6
call    8 never executed
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  368-block  7
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  368-block  8
call   16 never executed
    $$$$$:  368-block  9
    $$$$$:  368-block 10
    %%%%%:  368-block 11
    %%%%%:  368-block 12
    %%%%%:  368-block 13
call   17 never executed
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$:  368-block 14
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$:  368-block 15
call   25 never executed
    $$$$$:  368-block 16
    $$$$$:  368-block 17
    %%%%%:  368-block 18
    %%%%%:  368-block 19
    %%%%%:  368-block 20
call   26 never executed
    #####:  369:                                 archive::no_header, header->offset);
    $$$$$:  369-block  0
call    0 never executed
    $$$$$:  369-block  1
call    1 never executed
    $$$$$:  369-block  2
call    2 never executed
    #####:  370:  in >> value;
    $$$$$:  370-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  370-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  370-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  371:
        -:  372:  // Mark this message as received
    #####:  373:  header->tag = -1;
    $$$$$:  373-block  0
call    0 never executed
    $$$$$:  373-block  1
call    1 never executed
    $$$$$:  373-block  2
call    2 never executed
        -:  374:
        -:  375:  // Move the "next header" indicator to the next unreceived message
    #####:  376:  while (incoming.next_header[my_block_number()] != incoming.headers.end()
    $$$$$:  376-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  376-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$:  376-block  2
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
    #####:  377:         && incoming.next_header[my_block_number()]->tag == -1)
branch  0 never executed
branch  1 never executed
    $$$$$:  377-block  0
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  377-block  1
    $$$$$:  377-block  2
    $$$$$:  377-block  3
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
    $$$$$:  377-block  4
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  377-block  5
    $$$$$:  377-block  6
    $$$$$:  377-block  7
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$:  377-block  8
call   20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$:  377-block  9
    $$$$$:  377-block 10
    $$$$$:  377-block 11
branch 25 never executed
branch 26 never executed
    #####:  378:    ++incoming.next_header[my_block_number()];
    $$$$$:  378-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:  378-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$:  378-block  2
call    6 never executed
call    7 never executed
call    8 never executed
        -:  379:
    #####:  380:  if (incoming.next_header[my_block_number()] == incoming.headers.end()) {
    $$$$$:  380-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  380-block  1
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  380-block  2
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
    #####:  381:    bool finished = true;
    #####:  382:    for (std::size_t i = 0; i < incoming.next_header.size() && finished; ++i) {
    $$$$$:  382-block  0
    $$$$$:  382-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  382-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:  382-block  3
    $$$$$:  382-block  4
    $$$$$:  382-block  5
branch  5 never executed
branch  6 never executed
    $$$$$:  382-block  6
    $$$$$:  382-block  7
    $$$$$:  382-block  8
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  382-block  9
branch 10 never executed
branch 11 never executed
    $$$$$:  382-block 10
    $$$$$:  382-block 11
    $$$$$:  382-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:  382-block 13
    $$$$$:  382-block 14
    $$$$$:  382-block 15
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$:  382-block 16
branch 17 never executed
branch 18 never executed
    $$$$$:  382-block 17
    $$$$$:  382-block 18
    $$$$$:  382-block 19
branch 19 never executed
branch 20 never executed
    $$$$$:  382-block 20
    #####:  383:      if (incoming.next_header[i] != incoming.headers.end()) finished = false;
    $$$$$:  383-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  383-block  1
    $$$$$:  383-block  2
call    5 never executed
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  383-block  3
    $$$$$:  383-block  4
call   10 never executed
call   11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:  383-block  5
        -:  384:    }
        -:  385:
    #####:  386:    if (finished) {
    $$$$$:  386-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  386-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  386-block  2
branch  4 never executed
branch  5 never executed
    #####:  387:      std::vector<impl::message_header> no_headers;
    $$$$$:  387-block  0
call    0 never executed
call    1 never executed
    $$$$$:  387-block  1
    $$$$$:  387-block  2
call    2 never executed
call    3 never executed
    $$$$$:  387-block  3
    $$$$$:  387-block  4
call    4 never executed
call    5 never executed
    $$$$$:  387-block  5
    #####:  388:      incoming.headers.swap(no_headers);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  389:      buffer_type empty_buffer;
call    0 never executed
    $$$$$:  389-block  0
call    1 never executed
call    2 never executed
    $$$$$:  389-block  1
call    3 never executed
call    4 never executed
    $$$$$:  389-block  2
call    5 never executed
    #####:  390:      incoming.buffer.swap(empty_buffer);
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  391:      for (std::size_t i = 0; i < incoming.next_header.size(); ++i)
    $$$$$:  391-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  391-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  391-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  392:        incoming.next_header[i] = incoming.headers.end();
    $$$$$:  392-block  0
call    0 never executed
call    1 never executed
    $$$$$:  392-block  1
call    2 never executed
call    3 never executed
    $$$$$:  392-block  2
call    4 never executed
call    5 never executed
        -:  393:    }
        -:  394:  }
        -:  395:
    #####:  396:  return true;
        -:  397:}
        -:  398:
        -:  399:template<typename T>
        -:  400:typename disable_if<boost::mpi::is_mpi_datatype<T>, bool>::type
        -:  401:mpi_process_group::
        -:  402:array_receive_impl(int source, int tag, T* values, std::size_t& n) const
        -:  403:{
        -:  404:  impl::incoming_messages& incoming = impl_->incoming[source];
        -:  405:
        -:  406:  // Find the next header with the right tag
        -:  407:  std::vector<impl::message_header>::iterator header =
        -:  408:    incoming.next_header[my_block_number()];
        -:  409:  while (header != incoming.headers.end() && header->tag != tag) ++header;
        -:  410:
        -:  411:  // If no header is found, notify the caller
        -:  412:  if (header == incoming.headers.end()) return false;
        -:  413:
        -:  414:  // Deserialize the data
        -:  415:  boost::mpi::packed_iarchive in(impl_->comm, incoming.buffer, 
        -:  416:                                 archive::no_header, header->offset);
        -:  417:  std::size_t num_sent;
        -:  418:  in >> num_sent;
        -:  419:  if (num_sent > n)
        -:  420:    std::cerr << "ERROR: Have " << num_sent << " items but only space for "
        -:  421:              << n << " items\n";
        -:  422:
        -:  423:  for (std::size_t i = 0; i < num_sent; ++i)
        -:  424:    in >> values[i];
        -:  425:  n = num_sent;
        -:  426:
        -:  427:  // Mark this message as received
        -:  428:  header->tag = -1;
        -:  429:
        -:  430:  // Move the "next header" indicator to the next unreceived message
        -:  431:  while (incoming.next_header[my_block_number()] != incoming.headers.end()
        -:  432:         && incoming.next_header[my_block_number()]->tag == -1)
        -:  433:    ++incoming.next_header[my_block_number()];
        -:  434:
        -:  435:  if (incoming.next_header[my_block_number()] == incoming.headers.end()) {
        -:  436:    bool finished = true;
        -:  437:    for (std::size_t i = 0; i < incoming.next_header.size() && finished; ++i) {
        -:  438:      if (incoming.next_header[i] != incoming.headers.end()) finished = false;
        -:  439:    }
        -:  440:
        -:  441:    if (finished) {
        -:  442:      std::vector<impl::message_header> no_headers;
        -:  443:      incoming.headers.swap(no_headers);
        -:  444:      buffer_type empty_buffer;
        -:  445:      incoming.buffer.swap(empty_buffer);
        -:  446:      for (std::size_t i = 0; i < incoming.next_header.size(); ++i)
        -:  447:        incoming.next_header[i] = incoming.headers.end();
        -:  448:    }
        -:  449:  }
        -:  450:
        -:  451:  return true;
        -:  452:}
        -:  453:
        -:  454:// Construct triggers
        -:  455:template<typename Type, typename Handler>
function _ZN5boost5graph11distributed17mpi_process_group7triggerINS_6detail8parallel20msg_remove_edge_dataINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SH_NS_8defaultSEEENS_14bidirectionalSE11DynamicNode11DynamicEdgeNS_11no_propertyENS_5listSEEESC_vEEEEviRKT0_ called 1 returned 100% blocks executed 77%
function _ZN5boost5graph11distributed17mpi_process_group7triggerINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS4_14edge_desc_implINS_12directed_tagEmEEEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SG_NS_8defaultSEEENS_14bidirectionalSE11DynamicNodeS7_NS_11no_propertyENS_5listSEEESB_vEEEEviRKT0_ called 1 returned 100% blocks executed 77%
function _ZN5boost5graph11distributed17mpi_process_group7triggerINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SF_NS_8defaultSEEENS_14bidirectionalSE11DynamicNodeS9_NS_11no_propertyENS_5listSEEESA_vEEEEviRKT0_ called 1 returned 100% blocks executed 77%
function _ZN5boost5graph11distributed17mpi_process_group7triggerINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SE_NS_8defaultSEEENS_14bidirectionalSE11DynamicNode11DynamicEdgeNS_11no_propertyENS_5listSEEES9_vEEEEviRKT0_ called 1 returned 100% blocks executed 77%
function _ZN5boost5graph11distributed17mpi_process_group7triggerI11DynamicNodeNS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_S9_NS_8defaultSEEENS_14bidirectionalSES4_11DynamicEdgeNS_11no_propertyENS_5listSEEES4_vEEEEviRKT0_ called 1 returned 100% blocks executed 77%
        5:  456:void mpi_process_group::trigger(int tag, const Handler& handler)
        1:  456-block  0
        1:  456-block  1
        1:  456-block  2
        1:  456-block  3
        1:  456-block  4
        -:  457:{
        5:  458:  BOOST_ASSERT(block_num);
        1:  458-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  458-block  1
call    3 never executed
        1:  458-block  2
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    $$$$$:  458-block  3
call    7 never executed
        1:  458-block  4
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    $$$$$:  458-block  5
call   11 never executed
        1:  458-block  6
call   12 returned 1
branch 13 taken 0 (fallthrough)
branch 14 taken 1
    $$$$$:  458-block  7
call   15 never executed
        1:  458-block  8
call   16 returned 1
branch 17 taken 0 (fallthrough)
branch 18 taken 1
    $$$$$:  458-block  9
call   19 never executed
        5:  459:  install_trigger(tag,my_block_number(),shared_ptr<trigger_base>(
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  459-block  0
call    5 returned 1
    %%%%%:  459-block  1
call    6 never executed
call    7 returned 1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  459-block  2
call   12 returned 1
    %%%%%:  459-block  3
call   13 never executed
call   14 returned 1
call   15 returned 1
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:  459-block  4
call   19 returned 1
    %%%%%:  459-block  5
call   20 never executed
call   21 returned 1
call   22 returned 1
call   23 returned 1
branch 24 taken 1 (fallthrough)
branch 25 taken 0 (throw)
        1:  459-block  6
call   26 returned 1
    %%%%%:  459-block  7
call   27 never executed
call   28 returned 1
call   29 returned 1
call   30 returned 1
branch 31 taken 1 (fallthrough)
branch 32 taken 0 (throw)
        1:  459-block  8
call   33 returned 1
    %%%%%:  459-block  9
call   34 never executed
        5:  460:    new trigger_launcher<Type, Handler>(*this, tag, handler)));
        1:  460-block  0
call    0 returned 1
call    1 returned 1
        1:  460-block  1
call    2 returned 1
call    3 returned 1
        1:  460-block  2
call    4 returned 1
call    5 returned 1
        1:  460-block  3
call    6 returned 1
call    7 returned 1
        1:  460-block  4
call    8 returned 1
call    9 returned 1
        5:  461:}
        -:  462:
        -:  463:template<typename Type, typename Handler>
function _ZN5boost5graph11distributed17mpi_process_group18trigger_with_replyINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SF_NS_8defaultSEEENS_14bidirectionalSE11DynamicNodeS9_NS_11no_propertyENS_5listSEEESA_NSC_14untracked_pairINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEbEEEEEEviRKT0_ called 1 returned 100% blocks executed 77%
function _ZN5boost5graph11distributed17mpi_process_group18trigger_with_replyINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SE_NS_8defaultSEEENS_14bidirectionalSE11DynamicNode11DynamicEdgeNS_11no_propertyENS_5listSEEES9_NSB_14untracked_pairINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEbEEEEEEviRKT0_ called 1 returned 100% blocks executed 77%
function _ZN5boost5graph11distributed17mpi_process_group18trigger_with_replyI11DynamicNodeNS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_S9_NS_8defaultSEEENS_14bidirectionalSES4_11DynamicEdgeNS_11no_propertyENS_5listSEEES4_mEEEEviRKT0_ called 1 returned 100% blocks executed 77%
        3:  464:void mpi_process_group::trigger_with_reply(int tag, const Handler& handler)
        1:  464-block  0
        1:  464-block  1
        1:  464-block  2
        -:  465:{
        3:  466:  BOOST_ASSERT(block_num);
        1:  466-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  466-block  1
call    3 never executed
        1:  466-block  2
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    $$$$$:  466-block  3
call    7 never executed
        1:  466-block  4
call    8 returned 1
branch  9 taken 0 (fallthrough)
branch 10 taken 1
    $$$$$:  466-block  5
call   11 never executed
        3:  467:  install_trigger(tag,my_block_number(),shared_ptr<trigger_base>(
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  467-block  0
call    5 returned 1
    %%%%%:  467-block  1
call    6 never executed
call    7 returned 1
call    8 returned 1
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:  467-block  2
call   12 returned 1
    %%%%%:  467-block  3
call   13 never executed
call   14 returned 1
call   15 returned 1
call   16 returned 1
branch 17 taken 1 (fallthrough)
branch 18 taken 0 (throw)
        1:  467-block  4
call   19 returned 1
    %%%%%:  467-block  5
call   20 never executed
        3:  468:    new reply_trigger_launcher<Type, Handler>(*this, tag, handler)));
        1:  468-block  0
call    0 returned 1
call    1 returned 1
        1:  468-block  1
call    2 returned 1
call    3 returned 1
        1:  468-block  2
call    4 returned 1
call    5 returned 1
        3:  469:}
        -:  470:
        -:  471:template<typename Type, typename Handler>
        -:  472:void mpi_process_group::global_trigger(int tag, const Handler& handler, 
        -:  473:      std::size_t sz)
        -:  474:{
        -:  475:  if (sz==0) // normal trigger
        -:  476:    install_trigger(tag,0,shared_ptr<trigger_base>(
        -:  477:      new global_trigger_launcher<Type, Handler>(*this, tag, handler)));
        -:  478:  else // trigger with irecv
        -:  479:    install_trigger(tag,0,shared_ptr<trigger_base>(
        -:  480:      new global_irecv_trigger_launcher<Type, Handler>(*this, tag, handler,sz)));
        -:  481:  
        -:  482:}
        -:  483:
        -:  484:namespace detail {
        -:  485:
        -:  486:template<typename Type>
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb1EEE called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_8parallel6detail14untracked_pairIiNS_6detail8parallel17msg_add_edge_dataINS8_17global_descriptorImEEmEEEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb1EEE called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel20msg_remove_edge_dataINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb1EEE called 0 returned 0% blocks executed 0%
    #####:  487:void  do_oob_receive(mpi_process_group const& self,
    $$$$$:  487-block  0
    $$$$$:  487-block  1
    $$$$$:  487-block  2
        -:  488:    int source, int tag, Type& data, mpl::true_ /*is_mpi_datatype*/) 
        -:  489:{
        -:  490:  using boost::mpi::get_mpi_datatype;
        -:  491:
        -:  492:  //self.impl_->comm.recv(source,tag,data);
    #####:  493:  MPI_Recv(&data, 1, get_mpi_datatype<Type>(data), source, tag, self.impl_->comm,
    $$$$$:  493-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    $$$$$:  493-block  1
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
    $$$$$:  493-block  2
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:  494:           MPI_STATUS_IGNORE);
    #####:  495:}
        -:  496:
        -:  497:template<typename Type>
function _ZN5boost5graph11distributed6detail14do_oob_receiveI11DynamicNodeEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_8parallel6detail14untracked_pairIi11DynamicNodeEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_8parallel6detail14untracked_pairIiNS_6detail8parallel31msg_add_edge_with_property_dataINS8_17global_descriptorImEEm11DynamicEdgeEEEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS4_14edge_desc_implINS_12directed_tagEmEEEEEEvRKNS1_17mpi_process_groupEiiRT_N4mpl_5bool_ILb0EEE called 0 returned 0% blocks executed 0%
    #####:  498:void do_oob_receive(mpi_process_group const& self,
    $$$$$:  498-block  0
    $$$$$:  498-block  1
    $$$$$:  498-block  2
    $$$$$:  498-block  3
    $$$$$:  498-block  4
        -:  499:    int source, int tag, Type& data, mpl::false_ /*is_mpi_datatype*/) 
        -:  500:{
        -:  501:  //  self.impl_->comm.recv(source,tag,data);
        -:  502:  // Receive the size of the data packet
    #####:  503:  boost::mpi::status status;
    $$$$$:  503-block  0
call    0 never executed
    $$$$$:  503-block  1
call    1 never executed
    $$$$$:  503-block  2
call    2 never executed
    $$$$$:  503-block  3
call    3 never executed
    $$$$$:  503-block  4
call    4 never executed
    #####:  504:  status = self.impl_->comm.probe(source, tag);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
call   13 never executed
branch 14 never executed
branch 15 never executed
call   16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
        -:  505:
        -:  506:#if BOOST_VERSION >= 103600
    #####:  507:  int size = status.count<boost::mpi::packed>().get();
    $$$$$:  507-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  507-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  507-block  2
    %%%%%:  507-block  3
    $$$$$:  507-block  4
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  507-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  507-block  6
    %%%%%:  507-block  7
    $$$$$:  507-block  8
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:  507-block  9
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  507-block 10
    %%%%%:  507-block 11
    $$$$$:  507-block 12
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$:  507-block 13
call   21 never executed
branch 22 never executed
branch 23 never executed
    %%%%%:  507-block 14
    %%%%%:  507-block 15
    $$$$$:  507-block 16
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$:  507-block 17
call   27 never executed
branch 28 never executed
branch 29 never executed
    %%%%%:  507-block 18
    %%%%%:  507-block 19
        -:  508:#else
        -:  509:  int size;
        -:  510:  MPI_Status& mpi_status = status;
        -:  511:  MPI_Get_count(&mpi_status, MPI_PACKED, &size);
        -:  512:#endif
        -:  513:
        -:  514:  // Receive the data packed itself
    #####:  515:  boost::mpi::packed_iarchive in(self.impl_->comm);
    $$$$$:  515-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  515-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  515-block  2
call    7 never executed
    %%%%%:  515-block  3
    %%%%%:  515-block  4
call    8 never executed
    $$$$$:  515-block  5
call    9 never executed
call   10 never executed
branch 11 never executed
branch 12 never executed
    $$$$$:  515-block  6
call   13 never executed
branch 14 never executed
branch 15 never executed
    $$$$$:  515-block  7
call   16 never executed
    %%%%%:  515-block  8
    %%%%%:  515-block  9
call   17 never executed
    $$$$$:  515-block 10
call   18 never executed
call   19 never executed
branch 20 never executed
branch 21 never executed
    $$$$$:  515-block 11
call   22 never executed
branch 23 never executed
branch 24 never executed
    $$$$$:  515-block 12
call   25 never executed
    %%%%%:  515-block 13
    %%%%%:  515-block 14
call   26 never executed
    $$$$$:  515-block 15
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
    $$$$$:  515-block 16
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$:  515-block 17
call   34 never executed
    %%%%%:  515-block 18
    %%%%%:  515-block 19
call   35 never executed
    $$$$$:  515-block 20
call   36 never executed
call   37 never executed
branch 38 never executed
branch 39 never executed
    $$$$$:  515-block 21
call   40 never executed
branch 41 never executed
branch 42 never executed
    $$$$$:  515-block 22
call   43 never executed
    %%%%%:  515-block 23
    %%%%%:  515-block 24
call   44 never executed
    #####:  516:  in.resize(size);
    $$$$$:  516-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  516-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  516-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  516-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  516-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  517:  MPI_Recv(in.address(), size, MPI_PACKED, source, tag, self.impl_->comm,
    $$$$$:  517-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  517-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    $$$$$:  517-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  517-block  3
call   10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
    $$$$$:  517-block  4
call   14 never executed
branch 15 never executed
branch 16 never executed
    $$$$$:  517-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    $$$$$:  517-block  6
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
    $$$$$:  517-block  7
call   24 never executed
branch 25 never executed
branch 26 never executed
    $$$$$:  517-block  8
call   27 never executed
branch 28 never executed
branch 29 never executed
    $$$$$:  517-block  9
call   30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
    $$$$$:  517-block 10
call   34 never executed
branch 35 never executed
branch 36 never executed
    $$$$$:  517-block 11
call   37 never executed
branch 38 never executed
branch 39 never executed
    $$$$$:  517-block 12
call   40 never executed
call   41 never executed
branch 42 never executed
branch 43 never executed
    $$$$$:  517-block 13
call   44 never executed
branch 45 never executed
branch 46 never executed
    $$$$$:  517-block 14
call   47 never executed
branch 48 never executed
branch 49 never executed
        -:  518:       MPI_STATUS_IGNORE);
        -:  519:
        -:  520:  // Deserialize the data
    #####:  521:  in >> data;
    $$$$$:  521-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  521-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  521-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  521-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  521-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  522:}
        -:  523:
        -:  524:template<typename Type>
function _ZN5boost5graph11distributed6detail14do_oob_receiveI11DynamicNodeEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_8parallel6detail14untracked_pairIi11DynamicNodeEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_8parallel6detail14untracked_pairIiNS_6detail8parallel17msg_add_edge_dataINS8_17global_descriptorImEEmEEEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_8parallel6detail14untracked_pairIiNS_6detail8parallel31msg_add_edge_with_property_dataINS8_17global_descriptorImEEm11DynamicEdgeEEEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS4_14edge_desc_implINS_12directed_tagEmEEEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed6detail14do_oob_receiveINS_6detail8parallel20msg_remove_edge_dataINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEEEEEvRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
    #####:  525:void do_oob_receive(mpi_process_group const& self, int source, int tag, Type& data) 
    $$$$$:  525-block  0
    $$$$$:  525-block  1
    $$$$$:  525-block  2
    $$$$$:  525-block  3
    $$$$$:  525-block  4
    $$$$$:  525-block  5
    $$$$$:  525-block  6
    $$$$$:  525-block  7
        -:  526:{
    #####:  527:  do_oob_receive(self, source, tag, data,
    $$$$$:  527-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  527-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  527-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  527-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  527-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:  527-block  5
call   15 never executed
branch 16 never executed
branch 17 never executed
    $$$$$:  527-block  6
call   18 never executed
branch 19 never executed
branch 20 never executed
    $$$$$:  527-block  7
call   21 never executed
branch 22 never executed
branch 23 never executed
        -:  528:                           boost::mpi::is_mpi_datatype<Type>());
    #####:  529:}
    $$$$$:  529-block  0
    $$$$$:  529-block  1
    $$$$$:  529-block  2
    $$$$$:  529-block  3
    $$$$$:  529-block  4
    $$$$$:  529-block  5
    $$$$$:  529-block  6
    $$$$$:  529-block  7
        -:  530:
        -:  531:
        -:  532:} // namespace detail
        -:  533:
        -:  534:
        -:  535:template<typename Type, typename Handler>
        -:  536:void 
function _ZNK5boost5graph11distributed17mpi_process_group16trigger_launcherI11DynamicNodeNS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_S9_NS_8defaultSEEENS_14bidirectionalSES4_11DynamicEdgeNS_11no_propertyENS_5listSEEES4_vEEE7receiveERKS2_iiNS5_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group16trigger_launcherINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SE_NS_8defaultSEEENS_14bidirectionalSE11DynamicNode11DynamicEdgeNS_11no_propertyENS_5listSEEES9_vEEE7receiveERKS2_iiNSA_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group16trigger_launcherINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SF_NS_8defaultSEEENS_14bidirectionalSE11DynamicNodeS9_NS_11no_propertyENS_5listSEEESA_vEEE7receiveERKS2_iiNSB_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group16trigger_launcherINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS4_14edge_desc_implINS_12directed_tagEmEEEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SG_NS_8defaultSEEENS_14bidirectionalSE11DynamicNodeS7_NS_11no_propertyENS_5listSEEESB_vEEE7receiveERKS2_iiNSC_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group16trigger_launcherINS_6detail8parallel20msg_remove_edge_dataINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SH_NS_8defaultSEEENS_14bidirectionalSE11DynamicNode11DynamicEdgeNS_11no_propertyENS_5listSEEESC_vEEE7receiveERKS2_iiNSD_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
    #####:  537:mpi_process_group::trigger_launcher<Type, Handler>::
    $$$$$:  537-block  0
    $$$$$:  537-block  1
    $$$$$:  537-block  2
    $$$$$:  537-block  3
    $$$$$:  537-block  4
        -:  538:receive(mpi_process_group const&, int source, int tag, 
        -:  539:        trigger_receive_context context, int block) const
        -:  540:{
        -:  541:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  542:  std::cerr << (out_of_band? "OOB trigger" : "Trigger") 
        -:  543:            << " receive from source " << source << " and tag " << tag
        -:  544:        << " in block " << (block == -1 ? self.my_block_number() : block) << std::endl;
        -:  545:#endif
        -:  546:
    #####:  547:  Type data;
    $$$$$:  547-block  0
call    0 never executed
    $$$$$:  547-block  1
call    1 never executed
    %%%%%:  547-block  2
call    2 never executed
    $$$$$:  547-block  3
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  547-block  4
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  547-block  5
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  547-block  6
call   12 never executed
        -:  548:
    #####:  549:  if (context == trc_out_of_band) {
branch  0 never executed
branch  1 never executed
    $$$$$:  549-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  549-block  1
branch  4 never executed
branch  5 never executed
    $$$$$:  549-block  2
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -:  550:    // Receive the message directly off the wire
    #####:  551:    int realtag  = self.encode_tag(
    $$$$$:  551-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  551-block  1
call    2 never executed
    $$$$$:  551-block  2
    $$$$$:  551-block  3
call    3 never executed
    $$$$$:  551-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  551-block  5
call    6 never executed
    $$$$$:  551-block  6
    $$$$$:  551-block  7
call    7 never executed
    $$$$$:  551-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  551-block  9
call   10 never executed
    $$$$$:  551-block 10
    $$$$$:  551-block 11
call   11 never executed
    $$$$$:  551-block 12
branch 12 never executed
branch 13 never executed
    $$$$$:  551-block 13
call   14 never executed
    $$$$$:  551-block 14
    $$$$$:  551-block 15
call   15 never executed
    $$$$$:  551-block 16
branch 16 never executed
branch 17 never executed
    $$$$$:  551-block 17
call   18 never executed
    $$$$$:  551-block 18
    $$$$$:  551-block 19
call   19 never executed
    #####:  552:      block == -1 ? self.my_block_number() : block, tag);
    #####:  553:    detail::do_oob_receive(self,source,realtag,data);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  553-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  553-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  553-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  553-block  3
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:  553-block  4
        -:  554:  }
        -:  555:  else
        -:  556:    // Receive the message out of the local buffer
    #####:  557:    boost::graph::distributed::receive(self, source, tag, data);
    $$$$$:  557-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  557-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  557-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  557-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  557-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
        -:  558:
        -:  559:  // Pass the message off to the handler
    #####:  560:  handler(source, tag, data, context);
    $$$$$:  560-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  560-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  560-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  560-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  560-block  4
call   12 never executed
branch 13 never executed
branch 14 never executed
    #####:  561:}
    $$$$$:  561-block  0
    $$$$$:  561-block  1
    $$$$$:  561-block  2
    $$$$$:  561-block  3
        -:  562:
        -:  563:template<typename Type, typename Handler>
        -:  564:void 
function _ZNK5boost5graph11distributed17mpi_process_group22reply_trigger_launcherI11DynamicNodeNS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_S9_NS_8defaultSEEENS_14bidirectionalSES4_11DynamicEdgeNS_11no_propertyENS_5listSEEES4_mEEE7receiveERKS2_iiNS5_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group22reply_trigger_launcherINS_6detail8parallel17msg_add_edge_dataINS5_17global_descriptorImEEmEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SE_NS_8defaultSEEENS_14bidirectionalSE11DynamicNode11DynamicEdgeNS_11no_propertyENS_5listSEEES9_NSB_14untracked_pairINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEbEEEEE7receiveERKS2_iiNSA_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
function _ZNK5boost5graph11distributed17mpi_process_group22reply_trigger_launcherINS_6detail8parallel31msg_add_edge_with_property_dataINS5_17global_descriptorImEEm11DynamicEdgeEENS_8parallel6detail16simple_trigger_tINS_14adjacency_listINS_4vecSENS_12distributedSIS2_SF_NS_8defaultSEEENS_14bidirectionalSE11DynamicNodeS9_NS_11no_propertyENS_5listSEEESA_NSC_14untracked_pairINS5_15edge_descriptorINS4_14edge_desc_implINS_12directed_tagEmEEEEbEEEEE7receiveERKS2_iiNSB_23trigger_receive_contextEi called 0 returned 0% blocks executed 0%
    #####:  565:mpi_process_group::reply_trigger_launcher<Type, Handler>::
    $$$$$:  565-block  0
    $$$$$:  565-block  1
    $$$$$:  565-block  2
        -:  566:receive(mpi_process_group const&, int source, int tag, 
        -:  567:        trigger_receive_context context, int block) const
        -:  568:{
        -:  569:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  570:  std::cerr << (out_of_band? "OOB reply trigger" : "Reply trigger") 
        -:  571:            << " receive from source " << source << " and tag " << tag
        -:  572:        << " in block " << (block == -1 ? self.my_block_number() : block) << std::endl;
        -:  573:#endif
    #####:  574:  BOOST_ASSERT(context == trc_out_of_band);
    $$$$$:  574-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  574-block  1
call    2 never executed
    $$$$$:  574-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:  574-block  3
call    5 never executed
    $$$$$:  574-block  4
branch  6 never executed
branch  7 never executed
    $$$$$:  574-block  5
call    8 never executed
        -:  575:
    #####:  576:  boost::parallel::detail::untracked_pair<int, Type> data;
    $$$$$:  576-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  576-block  1
call    3 never executed
    %%%%%:  576-block  2
call    4 never executed
    $$$$$:  576-block  3
call    5 never executed
branch  6 never executed
branch  7 never executed
    $$$$$:  576-block  4
call    8 never executed
branch  9 never executed
branch 10 never executed
        -:  577:
        -:  578:  // Receive the message directly off the wire
    #####:  579:  int realtag  = self.encode_tag(block == -1 ? self.my_block_number() : block,
    $$$$$:  579-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  579-block  1
call    2 never executed
    $$$$$:  579-block  2
    $$$$$:  579-block  3
call    3 never executed
    $$$$$:  579-block  4
branch  4 never executed
branch  5 never executed
    $$$$$:  579-block  5
call    6 never executed
    $$$$$:  579-block  6
    $$$$$:  579-block  7
call    7 never executed
    $$$$$:  579-block  8
branch  8 never executed
branch  9 never executed
    $$$$$:  579-block  9
call   10 never executed
    $$$$$:  579-block 10
    $$$$$:  579-block 11
call   11 never executed
        -:  580:                                 tag);
    #####:  581:  detail::do_oob_receive(self, source, realtag, data);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  582:
        -:  583:  // Pass the message off to the handler and send the result back to
        -:  584:  // the source.
    #####:  585:  send_oob(self, source, data.first, 
    $$$$$:  585-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  585-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  585-block  2
    $$$$$:  585-block  3
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  585-block  4
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  585-block  5
    $$$$$:  585-block  6
call   12 never executed
branch 13 never executed
branch 14 never executed
    $$$$$:  585-block  7
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:  585-block  8
        -:  586:           handler(source, tag, data.second, context), -2);
    #####:  587:}
    $$$$$:  587-block  0
    $$$$$:  587-block  1
        -:  588:
        -:  589:template<typename Type, typename Handler>
        -:  590:void 
        -:  591:mpi_process_group::global_trigger_launcher<Type, Handler>::
        -:  592:receive(mpi_process_group const& self, int source, int tag, 
        -:  593:        trigger_receive_context context, int block) const
        -:  594:{
        -:  595:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  596:  std::cerr << (out_of_band? "OOB trigger" : "Trigger") 
        -:  597:            << " receive from source " << source << " and tag " << tag
        -:  598:        << " in block " << (block == -1 ? self.my_block_number() : block) << std::endl;
        -:  599:#endif
        -:  600:
        -:  601:  Type data;
        -:  602:
        -:  603:  if (context == trc_out_of_band) {
        -:  604:    // Receive the message directly off the wire
        -:  605:    int realtag  = self.encode_tag(
        -:  606:      block == -1 ? self.my_block_number() : block, tag);
        -:  607:    detail::do_oob_receive(self,source,realtag,data);
        -:  608:  }
        -:  609:  else
        -:  610:    // Receive the message out of the local buffer
        -:  611:    boost::graph::distributed::receive(self, source, tag, data);
        -:  612:
        -:  613:  // Pass the message off to the handler
        -:  614:  handler(self, source, tag, data, context);
        -:  615:}
        -:  616:
        -:  617:
        -:  618:template<typename Type, typename Handler>
        -:  619:void 
        -:  620:mpi_process_group::global_irecv_trigger_launcher<Type, Handler>::
        -:  621:receive(mpi_process_group const& self, int source, int tag, 
        -:  622:        trigger_receive_context context, int block) const
        -:  623:{
        -:  624:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  625:  std::cerr << (out_of_band? "OOB trigger" : "Trigger") 
        -:  626:            << " receive from source " << source << " and tag " << tag
        -:  627:        << " in block " << (block == -1 ? self.my_block_number() : block) << std::endl;
        -:  628:#endif
        -:  629:
        -:  630:  Type data;
        -:  631:
        -:  632:  if (context == trc_out_of_band) {
        -:  633:    return;
        -:  634:  }
        -:  635:  BOOST_ASSERT (context == trc_irecv_out_of_band);
        -:  636:
        -:  637:  // force posting of new MPI_Irecv, even though buffer is already allocated
        -:  638:  boost::mpi::packed_iarchive ia(self.impl_->comm,self.impl_->buffers[tag]);
        -:  639:  ia >> data;
        -:  640:  // Start a new receive
        -:  641:  prepare_receive(self,tag,true);
        -:  642:  // Pass the message off to the handler
        -:  643:  handler(self, source, tag, data, context);
        -:  644:}
        -:  645:
        -:  646:
        -:  647:template<typename Type, typename Handler>
        -:  648:void 
        -:  649:mpi_process_group::global_irecv_trigger_launcher<Type, Handler>::
        -:  650:prepare_receive(mpi_process_group const& self, int tag, bool force) const
        -:  651:{
        -:  652:#ifdef PBGL_PROCESS_GROUP_DEBUG
        -:  653: std::cerr << ("Posting Irecv for trigger") 
        -:  654:      << " receive with tag " << tag << std::endl;
        -:  655:#endif
        -:  656:  if (self.impl_->buffers.find(tag) == self.impl_->buffers.end()) {
        -:  657:    self.impl_->buffers[tag].resize(buffer_size);
        -:  658:    force = true;
        -:  659:  }
        -:  660:  BOOST_ASSERT(static_cast<int>(self.impl_->buffers[tag].size()) >= buffer_size);
        -:  661:  
        -:  662:  //BOOST_MPL_ASSERT(mpl::not_<is_mpi_datatype<Type> >);
        -:  663:  if (force) {
        -:  664:    self.impl_->requests.push_back(MPI_Request());
        -:  665:    MPI_Request* request = &self.impl_->requests.back();
        -:  666:    MPI_Irecv(&self.impl_->buffers[tag].front(),buffer_size,
        -:  667:               MPI_PACKED,MPI_ANY_SOURCE,tag,self.impl_->comm,request);
        -:  668:  }
        -:  669:}
        -:  670:
        -:  671:
        -:  672:template<typename T>
        -:  673:inline mpi_process_group::process_id_type
        -:  674:receive(const mpi_process_group& pg, int tag, T& value)
        -:  675:{
        -:  676:  for (std::size_t source = 0; source < pg.impl_->incoming.size(); ++source) {
        -:  677:    if (pg.receive_impl(source, pg.encode_tag(pg.my_block_number(), tag),
        -:  678:                        value, boost::mpi::is_mpi_datatype<T>()))
        -:  679:      return source;
        -:  680:  }
        -:  681:  BOOST_ASSERT (false);
        -:  682:}
        -:  683:
        -:  684:template<typename T>
        -:  685:typename 
        -:  686:  enable_if<boost::mpi::is_mpi_datatype<T>, 
        -:  687:            std::pair<mpi_process_group::process_id_type, std::size_t> >::type
        -:  688:receive(const mpi_process_group& pg, int tag, T values[], std::size_t n)
        -:  689:{
        -:  690:  for (std::size_t source = 0; source < pg.impl_->incoming.size(); ++source) {
        -:  691:    bool result =
        -:  692:      pg.receive_impl(source, pg.encode_tag(pg.my_block_number(), tag),
        -:  693:                 boost::serialization::make_array(values,n),
        -:  694:                 boost::mpl::true_());
        -:  695:    if (result) 
        -:  696:      return std::make_pair(source, n);
        -:  697:  }
        -:  698:  BOOST_ASSERT(false);
        -:  699:}
        -:  700:
        -:  701:template<typename T>
        -:  702:typename 
        -:  703:  disable_if<boost::mpi::is_mpi_datatype<T>, 
        -:  704:             std::pair<mpi_process_group::process_id_type, std::size_t> >::type
        -:  705:receive(const mpi_process_group& pg, int tag, T values[], std::size_t n)
        -:  706:{
        -:  707:  for (std::size_t source = 0; source < pg.impl_->incoming.size(); ++source) {
        -:  708:    if (pg.array_receive_impl(source, pg.encode_tag(pg.my_block_number(), tag),
        -:  709:                              values, n))
        -:  710:      return std::make_pair(source, n);
        -:  711:  }
        -:  712:  BOOST_ASSERT(false);
        -:  713:}
        -:  714:
        -:  715:template<typename T>
        -:  716:mpi_process_group::process_id_type
function _ZN5boost5graph11distributed7receiveI11DynamicNodeEEiRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed7receiveINS_6detail8parallel17msg_add_edge_dataINS4_17global_descriptorImEEmEEEEiRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed7receiveINS_6detail8parallel31msg_add_edge_with_property_dataINS4_17global_descriptorImEEm11DynamicEdgeEEEEiRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed7receiveINS_6detail8parallel22msg_nonlocal_edge_dataI11DynamicEdgeNS3_14edge_desc_implINS_12directed_tagEmEEEEEEiRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed7receiveINS_6detail8parallel20msg_remove_edge_dataINS4_15edge_descriptorINS3_14edge_desc_implINS_12directed_tagEmEEEEEEEEiRKNS1_17mpi_process_groupEiiRT_ called 0 returned 0% blocks executed 0%
    #####:  717:receive(const mpi_process_group& pg,
    $$$$$:  717-block  0
    $$$$$:  717-block  1
    $$$$$:  717-block  2
    $$$$$:  717-block  3
    $$$$$:  717-block  4
        -:  718:        mpi_process_group::process_id_type source, int tag, T& value)
        -:  719:{
    #####:  720:  if (pg.receive_impl(source, pg.encode_tag(pg.my_block_number(), tag),
    $$$$$:  720-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    $$$$$:  720-block  1
branch  5 never executed
branch  6 never executed
    $$$$$:  720-block  2
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
    $$$$$:  720-block  3
branch 12 never executed
branch 13 never executed
    $$$$$:  720-block  4
call   14 never executed
call   15 never executed
call   16 never executed
branch 17 never executed
branch 18 never executed
    $$$$$:  720-block  5
branch 19 never executed
branch 20 never executed
    $$$$$:  720-block  6
call   21 never executed
call   22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
    $$$$$:  720-block  7
branch 26 never executed
branch 27 never executed
    $$$$$:  720-block  8
call   28 never executed
call   29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
    $$$$$:  720-block  9
branch 33 never executed
branch 34 never executed
        -:  721:                      value, boost::mpi::is_mpi_datatype<T>()))
    #####:  722:    return source;
    $$$$$:  722-block  0
    $$$$$:  722-block  1
    $$$$$:  722-block  2
    $$$$$:  722-block  3
    $$$$$:  722-block  4
    $$$$$:  722-block  5
    $$$$$:  722-block  6
    $$$$$:  722-block  7
    $$$$$:  722-block  8
    $$$$$:  722-block  9
        -:  723:  else {
    #####:  724:    fprintf(stderr,
    $$$$$:  724-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    $$$$$:  724-block  1
call    3 never executed
call    4 never executed
call    5 never executed
    $$$$$:  724-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  724-block  3
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  724-block  4
call   12 never executed
call   13 never executed
call   14 never executed
        -:  725:            "Process %d failed to receive a message from process %d with tag %d in block %d.\n",
        -:  726:            process_id(pg), source, tag, pg.my_block_number());
        -:  727:
    #####:  728:    BOOST_ASSERT(false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  729:    abort();
        -:  730:  }
        -:  731:}
        -:  732:
        -:  733:template<typename T>
        -:  734:typename 
        -:  735:  enable_if<boost::mpi::is_mpi_datatype<T>, 
        -:  736:            std::pair<mpi_process_group::process_id_type, std::size_t> >::type
        -:  737:receive(const mpi_process_group& pg, int source, int tag, T values[], 
        -:  738:        std::size_t n)
        -:  739:{
        -:  740:  if (pg.receive_impl(source, pg.encode_tag(pg.my_block_number(), tag),
        -:  741:                      boost::serialization::make_array(values,n), 
        -:  742:                      boost::mpl::true_()))
        -:  743:    return std::make_pair(source,n);
        -:  744:  else {
        -:  745:    fprintf(stderr,
        -:  746:            "Process %d failed to receive a message from process %d with tag %d in block %d.\n",
        -:  747:            process_id(pg), source, tag, pg.my_block_number());
        -:  748:
        -:  749:    BOOST_ASSERT(false);
        -:  750:    abort();
        -:  751:  }
        -:  752:}
        -:  753:
        -:  754:template<typename T>
        -:  755:typename 
        -:  756:  disable_if<boost::mpi::is_mpi_datatype<T>, 
        -:  757:             std::pair<mpi_process_group::process_id_type, std::size_t> >::type
        -:  758:receive(const mpi_process_group& pg, int source, int tag, T values[], 
        -:  759:        std::size_t n)
        -:  760:{
        -:  761:  pg.array_receive_impl(source, pg.encode_tag(pg.my_block_number(), tag),
        -:  762:                        values, n);
        -:  763:
        -:  764:  return std::make_pair(source, n);
        -:  765:}
        -:  766:
        -:  767:template<typename T, typename BinaryOperation>
        -:  768:T*
        -:  769:all_reduce(const mpi_process_group& pg, T* first, T* last, T* out,
        -:  770:           BinaryOperation bin_op)
        -:  771:{
        -:  772:  synchronize(pg);
        -:  773:
        -:  774:  bool inplace = first == out;
        -:  775:
        -:  776:  if (inplace) out = new T [last-first];
        -:  777:
        -:  778:  boost::mpi::all_reduce(boost::mpi::communicator(communicator(pg),
        -:  779:                                                  boost::mpi::comm_attach), 
        -:  780:                         first, last-first, out, bin_op);
        -:  781:
        -:  782:  if (inplace) {
        -:  783:    std::copy(out, out + (last-first), first);
        -:  784:    delete [] out;
        -:  785:    return last;
        -:  786:  }
        -:  787:
        -:  788:  return out;
        -:  789:}
        -:  790:
        -:  791:template<typename T>
        -:  792:void
        -:  793:broadcast(const mpi_process_group& pg, T& val, 
        -:  794:          mpi_process_group::process_id_type root)
        -:  795:{
        -:  796:  // broadcast the seed  
        -:  797:  boost::mpi::communicator comm(communicator(pg),boost::mpi::comm_attach);
        -:  798:  boost::mpi::broadcast(comm,val,root);
        -:  799:}
        -:  800:
        -:  801:
        -:  802:template<typename T, typename BinaryOperation>
        -:  803:T*
        -:  804:scan(const mpi_process_group& pg, T* first, T* last, T* out,
        -:  805:           BinaryOperation bin_op)
        -:  806:{
        -:  807:  synchronize(pg);
        -:  808:
        -:  809:  bool inplace = first == out;
        -:  810:
        -:  811:  if (inplace) out = new T [last-first];
        -:  812:
        -:  813:  boost::mpi::scan(communicator(pg), first, last-first, out, bin_op);
        -:  814:
        -:  815:  if (inplace) {
        -:  816:    std::copy(out, out + (last-first), first);
        -:  817:    delete [] out;
        -:  818:    return last;
        -:  819:  }
        -:  820:
        -:  821:  return out;
        -:  822:}
        -:  823:
        -:  824:
        -:  825:template<typename InputIterator, typename T>
        -:  826:void
        -:  827:all_gather(const mpi_process_group& pg, InputIterator first,
        -:  828:           InputIterator last, std::vector<T>& out)
        -:  829:{
        -:  830:  synchronize(pg);
        -:  831:
        -:  832:  // Stick a copy of the local values into a vector, so we can broadcast it
        -:  833:  std::vector<T> local_values(first, last);
        -:  834:
        -:  835:  // Collect the number of vertices stored in each process
        -:  836:  int size = local_values.size();
        -:  837:  std::vector<int> sizes(num_processes(pg));
        -:  838:  int result = MPI_Allgather(&size, 1, MPI_INT,
        -:  839:                             &sizes[0], 1, MPI_INT,
        -:  840:                             communicator(pg));
        -:  841:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  842:  (void)result;
        -:  843:
        -:  844:  // Adjust sizes based on the number of bytes
        -:  845:  //
        -:  846:  // std::transform(sizes.begin(), sizes.end(), sizes.begin(),
        -:  847:  //               std::bind2nd(std::multiplies<int>(), sizeof(T)));
        -:  848:  //
        -:  849:  // std::bind2nd has been removed from C++17
        -:  850:
        -:  851:  for( std::size_t i = 0, n = sizes.size(); i < n; ++i )
        -:  852:  {
        -:  853:    sizes[ i ] *= sizeof( T );
        -:  854:  }
        -:  855:
        -:  856:  // Compute displacements
        -:  857:  std::vector<int> displacements;
        -:  858:  displacements.reserve(sizes.size() + 1);
        -:  859:  displacements.push_back(0);
        -:  860:  std::partial_sum(sizes.begin(), sizes.end(),
        -:  861:                   std::back_inserter(displacements));
        -:  862:
        -:  863:  // Gather all of the values
        -:  864:  out.resize(displacements.back() / sizeof(T));
        -:  865:  if (!out.empty()) {
        -:  866:    result = MPI_Allgatherv(local_values.empty()? (void*)&local_values
        -:  867:                            /* local results */: (void*)&local_values[0],
        -:  868:                            local_values.size() * sizeof(T),
        -:  869:                            MPI_BYTE,
        -:  870:                            &out[0], &sizes[0], &displacements[0], MPI_BYTE,
        -:  871:                            communicator(pg));
        -:  872:  }
        -:  873:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  874:}
        -:  875:
        -:  876:template<typename InputIterator>
        -:  877:mpi_process_group
        -:  878:process_subgroup(const mpi_process_group& pg,
        -:  879:                 InputIterator first, InputIterator last)
        -:  880:{
        -:  881:/*
        -:  882:  boost::mpi::group current_group = communicator(pg).group();
        -:  883:  boost::mpi::group new_group = current_group.include(first,last);
        -:  884:  boost::mpi::communicator new_comm(communicator(pg),new_group);
        -:  885:  return mpi_process_group(new_comm);
        -:  886:*/
        -:  887:  std::vector<int> ranks(first, last);
        -:  888:
        -:  889:  MPI_Group current_group;
        -:  890:  int result = MPI_Comm_group(communicator(pg), &current_group);
        -:  891:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  892:  (void)result;
        -:  893:
        -:  894:  MPI_Group new_group;
        -:  895:  result = MPI_Group_incl(current_group, ranks.size(), &ranks[0], &new_group);
        -:  896:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  897:
        -:  898:  MPI_Comm new_comm;
        -:  899:  result = MPI_Comm_create(communicator(pg), new_group, &new_comm);
        -:  900:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  901:
        -:  902:  result = MPI_Group_free(&new_group);
        -:  903:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  904:  result = MPI_Group_free(&current_group);
        -:  905:  BOOST_ASSERT(result == MPI_SUCCESS);
        -:  906:
        -:  907:  if (new_comm != MPI_COMM_NULL) {
        -:  908:    mpi_process_group result_pg(boost::mpi::communicator(new_comm,boost::mpi::comm_attach));
        -:  909:    result = MPI_Comm_free(&new_comm);
        -:  910:    BOOST_ASSERT(result == 0);
        -:  911:    return result_pg;
        -:  912:  } else {
        -:  913:    return mpi_process_group(mpi_process_group::create_empty());
        -:  914:  }
        -:  915:
        -:  916:}
        -:  917:
        -:  918:
        -:  919:template<typename Receiver>
        -:  920:Receiver* mpi_process_group::get_receiver()
        -:  921:{
        -:  922:  return impl_->blocks[my_block_number()]->on_receive
        -:  923:           .template target<Receiver>();
        -:  924:}
        -:  925:
        -:  926:template<typename T>
        -:  927:typename enable_if<boost::mpi::is_mpi_datatype<T> >::type
function _ZN5boost5graph11distributed11receive_oobINS_8parallel6detail14untracked_pairINS_6detail8parallel15edge_descriptorINS6_14edge_desc_implINS_12directed_tagEmEEEEbEEEENS_9enable_ifINS_3mpi15is_mpi_datatypeIT_EEvE4typeERKNS1_17mpi_process_groupEiiRSH_i called 0 returned 0% blocks executed 0%
    #####:  928:receive_oob(const mpi_process_group& pg, 
    $$$$$:  928-block  0
        -:  929:            mpi_process_group::process_id_type source, int tag, T& value, int block)
        -:  930:{
        -:  931:  using boost::mpi::get_mpi_datatype;
        -:  932:
        -:  933:  // Determine the actual message we expect to receive, and which
        -:  934:  // communicator it will come by.
    #####:  935:  std::pair<boost::mpi::communicator, int> actual
    $$$$$:  935-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  935-block  1
call    3 never executed
    %%%%%:  935-block  2
call    4 never executed
        -:  936:    = pg.actual_communicator_and_tag(tag, block);
        -:  937:
        -:  938:  // Post a non-blocking receive that waits until we complete this request.
        -:  939:  MPI_Request request;
    #####:  940:  MPI_Irecv(&value, 1, get_mpi_datatype<T>(value),  
    $$$$$:  940-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  940-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  940-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  941:            source, actual.second, actual.first, &request); 
        -:  942:
    #####:  943:  int done = 0;
    $$$$$:  943-block  0
    #####:  944:  do {
    $$$$$:  944-block  0
    #####:  945:    MPI_Test(&request, &done, MPI_STATUS_IGNORE);
    $$$$$:  945-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  946:    if (!done)
    $$$$$:  946-block  0
branch  0 never executed
branch  1 never executed
    #####:  947:      pg.poll(/*wait=*/false, block);
    $$$$$:  947-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  947-block  1
call    3 never executed
    #####:  948:  } while (!done);
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
    #####:  949:}
        -:  950:
        -:  951:template<typename T>
        -:  952:typename disable_if<boost::mpi::is_mpi_datatype<T> >::type
        -:  953:receive_oob(const mpi_process_group& pg, 
        -:  954:            mpi_process_group::process_id_type source, int tag, T& value, int block)
        -:  955:{
        -:  956:  // Determine the actual message we expect to receive, and which
        -:  957:  // communicator it will come by.
        -:  958:  std::pair<boost::mpi::communicator, int> actual
        -:  959:    = pg.actual_communicator_and_tag(tag, block);
        -:  960:
        -:  961:  boost::optional<boost::mpi::status> status;
        -:  962:  do {
        -:  963:    status = actual.first.iprobe(source, actual.second);
        -:  964:    if (!status)
        -:  965:      pg.poll();
        -:  966:  } while (!status);
        -:  967:
        -:  968:  //actual.first.recv(status->source(), status->tag(),value);
        -:  969:
        -:  970:  // Allocate the receive buffer
        -:  971:  boost::mpi::packed_iarchive in(actual.first);
        -:  972:
        -:  973:#if BOOST_VERSION >= 103600
        -:  974:  in.resize(status->count<boost::mpi::packed>().get());
        -:  975:#else
        -:  976:  int size;
        -:  977:  MPI_Status mpi_status = *status;
        -:  978:  MPI_Get_count(&mpi_status, MPI_PACKED, &size);
        -:  979:  in.resize(size);
        -:  980:#endif
        -:  981:  
        -:  982:  // Receive the message data
        -:  983:  MPI_Recv(in.address(), in.size(), MPI_PACKED,
        -:  984:           status->source(), status->tag(), actual.first, MPI_STATUS_IGNORE);
        -:  985:  
        -:  986:  // Unpack the message data
        -:  987:  in >> value;
        -:  988:}
        -:  989:
        -:  990:
        -:  991:template<typename SendT, typename ReplyT>
        -:  992:typename enable_if<boost::mpi::is_mpi_datatype<ReplyT> >::type
function _ZN5boost5graph11distributed19send_oob_with_replyINS_6detail8parallel31msg_add_edge_with_property_dataINS4_17global_descriptorImEEm11DynamicEdgeEENS_8parallel6detail14untracked_pairINS4_15edge_descriptorINS3_14edge_desc_implINS_12directed_tagEmEEEEbEEEENS_9enable_ifINS_3mpi15is_mpi_datatypeIT0_EEvE4typeERKNS1_17mpi_process_groupEiiRKT_RSM_i called 0 returned 0% blocks executed 0%
function _ZN5boost5graph11distributed19send_oob_with_replyINS_6detail8parallel17msg_add_edge_dataINS4_17global_descriptorImEEmEENS_8parallel6detail14untracked_pairINS4_15edge_descriptorINS3_14edge_desc_implINS_12directed_tagEmEEEEbEEEENS_9enable_ifINS_3mpi15is_mpi_datatypeIT0_EEvE4typeERKNS1_17mpi_process_groupEiiRKT_RSL_i called 0 returned 0% blocks executed 0%
    #####:  993:send_oob_with_reply(const mpi_process_group& pg, 
    $$$$$:  993-block  0
    $$$$$:  993-block  1
        -:  994:                    mpi_process_group::process_id_type dest,
        -:  995:                    int tag, const SendT& send_value, ReplyT& reply_value,
        -:  996:                    int block)
        -:  997:{
    #####:  998:  detail::tag_allocator::token reply_tag = pg.impl_->allocated_tags.get_tag();
    $$$$$:  998-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$:  998-block  1
call    4 never executed
    %%%%%:  998-block  2
call    5 never executed
    $$$$$:  998-block  3
call    6 never executed
call    7 never executed
branch  8 never executed
branch  9 never executed
    $$$$$:  998-block  4
call   10 never executed
    %%%%%:  998-block  5
call   11 never executed
    #####:  999:  send_oob(pg, dest, tag, boost::parallel::detail::make_untracked_pair(
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  999-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  999-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  999-block  2
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:  999-block  3
    #####: 1000:        (int)reply_tag, send_value), block);
    $$$$$: 1000-block  0
call    0 never executed
    %%%%%: 1000-block  1
    $$$$$: 1000-block  2
call    1 never executed
    %%%%%: 1000-block  3
    #####: 1001:  receive_oob(pg, dest, reply_tag, reply_value);
    $$$$$: 1001-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    $$$$$: 1001-block  1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
    #####: 1002:}
        -: 1003:
        -: 1004:template<typename SendT, typename ReplyT>
        -: 1005:typename disable_if<boost::mpi::is_mpi_datatype<ReplyT> >::type
        -: 1006:send_oob_with_reply(const mpi_process_group& pg, 
        -: 1007:                    mpi_process_group::process_id_type dest,
        -: 1008:                    int tag, const SendT& send_value, ReplyT& reply_value,
        -: 1009:                    int block)
        -: 1010:{
        -: 1011:  detail::tag_allocator::token reply_tag = pg.impl_->allocated_tags.get_tag();
        -: 1012:  send_oob(pg, dest, tag, 
        -: 1013:           boost::parallel::detail::make_untracked_pair((int)reply_tag, 
        -: 1014:                                                        send_value), block);
        -: 1015:  receive_oob(pg, dest, reply_tag, reply_value);
        -: 1016:}
        -: 1017:
        -: 1018:} } } // end namespace boost::graph::distributed
