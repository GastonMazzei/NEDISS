        -:    0:Source:/usr/include/boost/mpi/detail/binary_buffer_iprimitive.hpp
        -:    0:Graph:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcno
        -:    0:Data:/home/m4zz31/cppprojct/cmake-build-debug-coverage/CMakeFiles/cppprojct.dir/Tests/graph-test-init.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// (C) Copyright 2005-2007 Matthias Troyer
        -:    2:
        -:    3:// Use, modification and distribution is subject to the Boost Software
        -:    4:// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
        -:    5:// http://www.boost.org/LICENSE_1_0.txt)
        -:    6:
        -:    7://  Authors: Matthias Troyer
        -:    8:
        -:    9:#ifndef BOOST_MPI_BINARY_BUFFER_IPRIMITIVE_HPP
        -:   10:#define BOOST_MPI_BINARY_BUFFER_IPRIMITIVE_HPP
        -:   11:
        -:   12:#include <mpi.h>
        -:   13:#include <iostream>
        -:   14:#include <cstddef> // size_t
        -:   15:#include <boost/config.hpp>
        -:   16:#include <boost/mpi/exception.hpp>
        -:   17:#include <boost/assert.hpp>
        -:   18:#include <boost/mpl/assert.hpp>
        -:   19:#include <boost/serialization/array.hpp>
        -:   20:#include <boost/serialization/is_bitwise_serializable.hpp>
        -:   21:#include <vector>
        -:   22:#include <boost/mpi/allocator.hpp>
        -:   23:#include <cstring> // for memcpy
        -:   24:#include <cassert>
        -:   25:
        -:   26:namespace boost { namespace mpi {
        -:   27:
        -:   28:/// deserialization using MPI_Unpack
        -:   29:
        -:   30:class BOOST_MPI_DECL binary_buffer_iprimitive
        -:   31:{
        -:   32:public:
        -:   33:    /// the type of the buffer from which the data is unpacked upon deserialization
        -:   34:    typedef std::vector<char, allocator<char> > buffer_type;
        -:   35:
function _ZN5boost3mpi24binary_buffer_iprimitiveC2ERSt6vectorIcNS0_9allocatorIcEEERKP19ompi_communicator_ti called 0 returned 0% blocks executed 0%
    #####:   36:    binary_buffer_iprimitive(buffer_type & b, MPI_Comm const &, int position = 0)
    $$$$$:   36-block  0
    #####:   37:     : buffer_(b),
    #####:   38:       position(position)
        -:   39:    {
    #####:   40:    }
        -:   41:
function _ZN5boost3mpi24binary_buffer_iprimitive7addressEv called 0 returned 0% blocks executed 0%
    #####:   42:    void* address ()
    $$$$$:   42-block  0
        -:   43:    {
    #####:   44:      return detail::c_data(buffer_);
    $$$$$:   44-block  0
call    0 never executed
        -:   45:    }
        -:   46:
        -:   47:    void const* address () const
        -:   48:    {
        -:   49:      return detail::c_data(buffer_);
        -:   50:    }
        -:   51:
        -:   52:    const std::size_t& size() const
        -:   53:    {
        -:   54:      return size_ = buffer_.size();
        -:   55:    }
        -:   56:
function _ZN5boost3mpi24binary_buffer_iprimitive6resizeEm called 0 returned 0% blocks executed 0%
    #####:   57:    void resize(std::size_t s)
    $$$$$:   57-block  0
        -:   58:    {
    #####:   59:      buffer_.resize(s);
    $$$$$:   59-block  0
call    0 never executed
    #####:   60:    }
        -:   61:
        -:   62:    void load_binary(void *address, std::size_t count)
        -:   63:    {
        -:   64:      load_impl(address,count);
        -:   65:    }
        -:   66:
        -:   67:    // fast saving of arrays of fundamental types
        -:   68:    template<class T>
function _ZN5boost3mpi24binary_buffer_iprimitive10load_arrayIdEEvRKNS_13serialization13array_wrapperIT_EEj called 0 returned 0% blocks executed 0%
    #####:   69:    void load_array(serialization::array_wrapper<T> const& x, unsigned int /* file_version */)
    $$$$$:   69-block  0
        -:   70:    {
        -:   71:      BOOST_MPL_ASSERT((serialization::is_bitwise_serializable<BOOST_DEDUCED_TYPENAME remove_const<T>::type>));
    #####:   72:      if (x.count())
    $$$$$:   72-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   73:        load_impl(x.address(), sizeof(T)*x.count());
    $$$$$:   73-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####:   74:    }
        -:   75:
        -:   76:    typedef serialization::is_bitwise_serializable<mpl::_1> use_array_optimization;
        -:   77:
        -:   78:    template<class T>
        -:   79:    void load(serialization::array_wrapper<T> const& x)
        -:   80:    {
        -:   81:      load_array(x,0u);
        -:   82:    }
        -:   83:
        -:   84:    // default saving of primitives.
        -:   85:    template<class T>
function _ZN5boost3mpi24binary_buffer_iprimitive4loadINS_13serialization20collection_size_typeEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadIiEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadIdEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadINS_6detail14edge_desc_implINS_12directed_tagEmEEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadINS_6detail8parallel17msg_add_edge_dataINS4_17global_descriptorImEEmEEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadINS_6detail8parallel20msg_remove_edge_dataINS4_15edge_descriptorINS3_14edge_desc_implINS_12directed_tagEmEEEEEEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadINS_7archive13tracking_typeEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadINS_7archive14object_id_typeEEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadIjEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadIaEEvRT_ called 0 returned 0% blocks executed 0%
function _ZN5boost3mpi24binary_buffer_iprimitive4loadIsEEvRT_ called 0 returned 0% blocks executed 0%
    #####:   86:    void load( T & t)
    $$$$$:   86-block  0
    $$$$$:   86-block  1
    $$$$$:   86-block  2
    $$$$$:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
    $$$$$:   86-block  6
    $$$$$:   86-block  7
    $$$$$:   86-block  8
    $$$$$:   86-block  9
    $$$$$:   86-block 10
        -:   87:    {
        -:   88:      BOOST_MPL_ASSERT((serialization::is_bitwise_serializable<BOOST_DEDUCED_TYPENAME remove_const<T>::type>));
    #####:   89:      load_impl(&t, sizeof(T));
    $$$$$:   89-block  0
call    0 never executed
    $$$$$:   89-block  1
call    1 never executed
    $$$$$:   89-block  2
call    2 never executed
    $$$$$:   89-block  3
call    3 never executed
    $$$$$:   89-block  4
call    4 never executed
    $$$$$:   89-block  5
call    5 never executed
    $$$$$:   89-block  6
call    6 never executed
    $$$$$:   89-block  7
call    7 never executed
    $$$$$:   89-block  8
call    8 never executed
    $$$$$:   89-block  9
call    9 never executed
    $$$$$:   89-block 10
call   10 never executed
    #####:   90:    }
        -:   91:
        -:   92:    template<class CharType>
function _ZN5boost3mpi24binary_buffer_iprimitive4loadIcEEvRNSt7__cxx1112basic_stringIT_St11char_traitsIS5_ESaIS5_EEE called 0 returned 0% blocks executed 0%
    #####:   93:    void load(std::basic_string<CharType> & s)
    $$$$$:   93-block  0
        -:   94:    {
        -:   95:      unsigned int l;
    #####:   96:      load(l);
    $$$$$:   96-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   97:      // borland de-allocator fixup
        -:   98:      #if BOOST_WORKAROUND(_RWSTD_VER, BOOST_TESTED_AT(20101))
        -:   99:      if(NULL != s.data())
        -:  100:      #endif
    #####:  101:      s.resize(l);
    $$$$$:  101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  102:      // note breaking a rule here - could be a problem on some platform
    #####:  103:      load_impl(const_cast<char *>(s.data()),l);
    $$$$$:  103-block  0
call    0 never executed
call    1 never executed
    #####:  104:    }
        -:  105:
        -:  106:private:
        -:  107:
function _ZN5boost3mpi24binary_buffer_iprimitive9load_implEPvi called 0 returned 0% blocks executed 0%
    #####:  108:    void load_impl(void * p, int l)
    $$$$$:  108-block  0
        -:  109:    {
    #####:  110:      assert(position+l<=static_cast<int>(buffer_.size()));
    $$$$$:  110-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$:  110-block  1
call    3 never executed
    #####:  111:      if (l)
    $$$$$:  111-block  0
branch  0 never executed
branch  1 never executed
    #####:  112:        std::memcpy(p,&buffer_[position],l);
    $$$$$:  112-block  0
call    0 never executed
    #####:  113:      position += l;
    #####:  114:    }
        -:  115:
        -:  116:    buffer_type & buffer_;
        -:  117:    mutable std::size_t size_;
        -:  118:    int position;
        -:  119:};
        -:  120:
        -:  121:} } // end namespace boost::mpi
        -:  122:
        -:  123:#endif // BOOST_MPI_PACKED_IPRIMITIVE_HPP
