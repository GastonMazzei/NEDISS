GeneralSolver tiene Solver, DifferentialEquation y TimeStructure 

El constructor define 4 params y el orden :-)

Tiene tres metodos like
    void SetStep(double h);
    void SetT0(double t0);
    void EvolveTime();


Tiene un wrapper de Evolve que pasa DifferentialEquation y DifferentialEquation.Specs como FlowSpecs al evolver del solver


Hereda de la generalDifEq un metodo BuildForSolver que solo seria util para PDEs y el metodo UpdateFlowSpecs


***ESTO SE PASA SOLO EN 'evolve', ACORDATE DE ACTUALIZARLO EN CADA ITERACION***
solver.T.h es dt
solver.T.t es t



***ONLY PROBLEM***
FALTA que el Solver construya las Specs que heredo usando los parametros definidos en GeneralSolver, porque sino NoiselessKuramoto no  se puede implementar para llamar a Field.
GeneralSolver.DifferentialEquation.UpdateFlowSpecs()
std::vector<double> &T1,
std::vector<double> &T2,
std::vector<double> &T3,
std::vector<double> &T4,
int &N



COMO ESCRIBIR UN SOLVER:

- El usuario va a inicializar a Specs accordingly, e.g. [0,1,0,1] 

t,h,a,b,c,d son dados

DiffEq te va a llegar algo called Equation "E" que tiene Field(t,a,b,c,d) con 
(double t, double a, 
std::vector<double> &b,
std::vector<double> &c,
std::vector<double> &d)

 y usa una config accesible en Specs
Como FlowSpecs te van a llegar las Specs de la diffeq

como answer un valor por referencia para llenar jeje

Y finalmente vas a tener cuatro Params que son los pesos para cada orden hasta orden cuatro :-)



